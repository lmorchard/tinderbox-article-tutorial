<?xml version="1.0" encoding="UTF-8" ?>
<tinderbox version="2" revision="8" >
<attrib Name="anything" editable="0" visibleInEditor="1" default="" >
<attrib Name="System" parent="anything" editable="0" visibleInEditor="1" default="" >
<attrib Name="Agent" parent="System" editable="0" visibleInEditor="1" type="4" default="false" >
<attrib Name="AgentAction" parent="Agent" editable="1" visibleInEditor="1" type="7" default="" >
</attrib>
<attrib Name="AgentCaseSensitive" parent="Agent" editable="1" visibleInEditor="1" type="4" default="true" >
</attrib>
<attrib Name="AgentPriority" parent="Agent" editable="1" visibleInEditor="1" type="2" default="1" >
</attrib>
<attrib Name="AgentQuery" parent="Agent" editable="1" visibleInEditor="1" default="" >
</attrib>
</attrib>
<attrib Name="Appearance" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="Badge" parent="Appearance" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="Border" parent="Appearance" editable="1" visibleInEditor="1" type="2" default="2" >
</attrib>
<attrib Name="BorderBevel" parent="Appearance" editable="1" visibleInEditor="1" default="automatic" >
</attrib>
<attrib Name="BorderColor" parent="Appearance" editable="1" visibleInEditor="1" type="1" default="automatic" >
</attrib>
<attrib Name="BorderDash" parent="Appearance" editable="1" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="Color" parent="Appearance" editable="1" visibleInEditor="1" type="1" default="dark warm gray" >
</attrib>
<attrib Name="Color2" parent="Appearance" editable="1" visibleInEditor="1" type="1" default="light warm gray" >
</attrib>
<attrib Name="Opacity" parent="Appearance" editable="1" visibleInEditor="1" type="2" default="100" >
</attrib>
<attrib Name="Pattern" parent="Appearance" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="PlotColor" parent="Appearance" editable="1" visibleInEditor="1" type="1" default="black" >
</attrib>
<attrib Name="Shadow" parent="Appearance" editable="1" visibleInEditor="1" type="4" default="true" >
</attrib>
<attrib Name="ShadowBlur" parent="Appearance" editable="1" visibleInEditor="1" type="2" default="10" >
</attrib>
<attrib Name="ShadowColor" parent="Appearance" editable="1" visibleInEditor="1" type="1" default="black" >
</attrib>
<attrib Name="ShadowDistance" parent="Appearance" editable="1" visibleInEditor="1" type="2" default="5" >
</attrib>
<attrib Name="Shape" parent="Appearance" editable="1" visibleInEditor="1" default="" >
</attrib>
</attrib>
<attrib Name="Events" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="DueDate" parent="Events" editable="1" visibleInEditor="1" type="5" default="never" >
</attrib>
<attrib Name="EndDate" parent="Events" editable="1" visibleInEditor="1" type="5" default="never" >
</attrib>
<attrib Name="StartDate" parent="Events" editable="1" visibleInEditor="1" type="5" default="never" >
</attrib>
</attrib>
<attrib Name="General" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="Checked" parent="General" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="ChildCount" parent="General" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="CleanupAction" parent="General" editable="1" visibleInEditor="1" default="grid" >
</attrib>
<attrib Name="Container" parent="General" editable="1" visibleInEditor="1" canInherit="0" default="" >
</attrib>
<attrib Name="Created" parent="General" editable="0" visibleInEditor="1" type="5" canInherit="0" default="never" >
</attrib>
<attrib Name="Creator" parent="General" editable="0" visibleInEditor="1" kind="1" canInherit="0" default="lmorchard" >
</attrib>
<attrib Name="DescendantCount" parent="General" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="DisplayExpression" parent="General" editable="1" visibleInEditor="1" type="7" default="" >
</attrib>
<attrib Name="DisplayName" parent="General" editable="0" visibleInEditor="1" default="" >
</attrib>
<attrib Name="File" parent="General" editable="1" visibleInEditor="1" type="3" default="" >
</attrib>
<attrib Name="ID" parent="General" editable="0" visibleInEditor="0" type="2" canInherit="0" default="0" >
</attrib>
<attrib Name="InboundLinkCount" parent="General" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="IsAlias" parent="General" editable="0" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="IsPrototype" parent="General" editable="1" visibleInEditor="1" type="4" canInherit="0" default="false" >
</attrib>
<attrib Name="Modified" parent="General" editable="0" visibleInEditor="1" type="5" canInherit="0" default="never" >
</attrib>
<attrib Name="Name" parent="General" editable="1" visibleInEditor="1" canInherit="0" default="untitled" >
</attrib>
<attrib Name="OnAdd" parent="General" editable="1" visibleInEditor="1" type="7" default="" >
</attrib>
<attrib Name="OutboundLinkCount" parent="General" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="OutlineDepth" parent="General" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="OutlineOrder" parent="General" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="Path" parent="General" editable="0" visibleInEditor="1" default="" >
</attrib>
<attrib Name="Private" parent="General" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="Prototype" parent="General" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="PrototypeBequeathsChildren" parent="General" editable="1" visibleInEditor="1" type="4" default="true" >
</attrib>
<attrib Name="ReadCount" parent="General" editable="0" visibleInEditor="1" type="2" canInherit="0" default="0" >
</attrib>
<attrib Name="Rule" parent="General" editable="1" visibleInEditor="1" type="7" default="" >
</attrib>
<attrib Name="SelectionCount" parent="General" editable="0" visibleInEditor="1" type="2" canInherit="0" default="0" >
</attrib>
<attrib Name="SiblingOrder" parent="General" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="WebLinkCount" parent="General" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
</attrib>
<attrib Name="HTML" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="HTMLBoldEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/b&gt;" >
</attrib>
<attrib Name="HTMLBoldStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;b&gt;" >
</attrib>
<attrib Name="HTMLCloud1End" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/span&gt;" >
</attrib>
<attrib Name="HTMLCloud1Start" parent="HTML" editable="1" visibleInEditor="1" default="&lt;span style=&quot;font-size: 0.75em&quot; &gt;" >
</attrib>
<attrib Name="HTMLCloud2End" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/span&gt;" >
</attrib>
<attrib Name="HTMLCloud2Start" parent="HTML" editable="1" visibleInEditor="1" default="&lt;span style=&quot;font-size: 1em&quot; &gt;" >
</attrib>
<attrib Name="HTMLCloud3End" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/span&gt;" >
</attrib>
<attrib Name="HTMLCloud3Start" parent="HTML" editable="1" visibleInEditor="1" default="&lt;span style=&quot;font-size: 1.4em&quot; &gt;" >
</attrib>
<attrib Name="HTMLCloud4End" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/span&gt;" >
</attrib>
<attrib Name="HTMLCloud4Start" parent="HTML" editable="1" visibleInEditor="1" default="&lt;span style=&quot;font-size: 2em&quot; &gt;" >
</attrib>
<attrib Name="HTMLCloud5End" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/span&gt;" >
</attrib>
<attrib Name="HTMLCloud5Start" parent="HTML" editable="1" visibleInEditor="1" default="&lt;span style=&quot;font-size: 2.8em&quot; &gt;" >
</attrib>
<attrib Name="HTMLDontExport" parent="HTML" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="HTMLEntities" parent="HTML" editable="1" visibleInEditor="1" type="4" default="true" >
</attrib>
<attrib Name="HTMLExportAfter" parent="HTML" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="HTMLExportBefore" parent="HTML" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="HTMLExportChildren" parent="HTML" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="HTMLExportCommand" parent="HTML" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="HTMLExportExtension" parent="HTML" editable="1" visibleInEditor="1" kind="9" default=".html" >
</attrib>
<attrib Name="HTMLExportFileName" parent="HTML" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="HTMLExportTemplate" parent="HTML" editable="1" visibleInEditor="1" kind="6" type="3" default="Portafilter:Users:lorchard:Applications:Tinderbox.app:Contents:MacOS:templates:html:plain" >
</attrib>
<attrib Name="HTMLFileNameLowerCase" parent="HTML" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="HTMLFileNameMaxLength" parent="HTML" editable="1" visibleInEditor="1" type="2" default="24" >
</attrib>
<attrib Name="HTMLFirstParagraphEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/p&gt;" >
</attrib>
<attrib Name="HTMLFirstParagraphStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;p&gt;" >
</attrib>
<attrib Name="HTMLImageEnd" parent="HTML" editable="1" visibleInEditor="1" default="&gt;" >
</attrib>
<attrib Name="HTMLImageStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;img" >
</attrib>
<attrib Name="HTMLIndentedParagraphEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/blockquote&gt;" >
</attrib>
<attrib Name="HTMLIndentedParagraphStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;blockquote&gt;" >
</attrib>
<attrib Name="HTMLItalicEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/i&gt;" >
</attrib>
<attrib Name="HTMLItalicStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;i&gt;" >
</attrib>
<attrib Name="HTMLListEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/ul&gt;" >
</attrib>
<attrib Name="HTMLListItemEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/li&gt;" >
</attrib>
<attrib Name="HTMLListItemStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;li&gt;" >
</attrib>
<attrib Name="HTMLListStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;ul&gt;" >
</attrib>
<attrib Name="HTMLMarkupText" parent="HTML" editable="1" visibleInEditor="1" type="4" default="true" >
</attrib>
<attrib Name="HTMLOrderedListEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/ol&gt;" >
</attrib>
<attrib Name="HTMLOrderedListStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;ol&gt;" >
</attrib>
<attrib Name="HTMLOverwriteImages" parent="HTML" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="HTMLParagraphEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/p&gt;" >
</attrib>
<attrib Name="HTMLParagraphStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;p&gt;" >
</attrib>
<attrib Name="HTMLQuoteHTML" parent="HTML" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="HTMLStrikeEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/strike&gt;" >
</attrib>
<attrib Name="HTMLStrikeStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;strike&gt;" >
</attrib>
<attrib Name="HTMLUnderlineEnd" parent="HTML" editable="1" visibleInEditor="1" default="&lt;/u&gt;" >
</attrib>
<attrib Name="HTMLUnderlineStart" parent="HTML" editable="1" visibleInEditor="1" default="&lt;u&gt;" >
</attrib>
<attrib Name="IsTemplate" parent="HTML" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
</attrib>
<attrib Name="Internal" parent="System" editable="0" visibleInEditor="0" default="" >
<attrib Name="Alias" parent="Internal" editable="0" visibleInEditor="0" type="6" default="0" >
</attrib>
<attrib Name="EntryScript" parent="Internal" editable="0" visibleInEditor="0" default="" >
</attrib>
<attrib Name="ExitScript" parent="Internal" editable="0" visibleInEditor="0" default="" >
</attrib>
<attrib Name="WindowPlace" parent="Internal" editable="0" visibleInEditor="0" kind="21" type="10" canInherit="0" default="Rect[ 50 50 750 350]" >
</attrib>
</attrib>
<attrib Name="Map" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="Fill" parent="Map" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="FillOpacity" parent="Map" editable="1" visibleInEditor="1" type="2" default="0.75" >
</attrib>
<attrib Name="Height" parent="Map" editable="1" visibleInEditor="1" type="2" canInherit="0" default="1" >
</attrib>
<attrib Name="InteriorScale" parent="Map" editable="1" visibleInEditor="1" kind="20" type="2" default="1.5" >
</attrib>
<attrib Name="LeafBase" parent="Map" editable="1" visibleInEditor="1" type="2" default="0.5" >
</attrib>
<attrib Name="LeafBend" parent="Map" editable="1" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="LeafDirection" parent="Map" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="LeafTip" parent="Map" editable="1" visibleInEditor="1" type="2" default="0.5" >
</attrib>
<attrib Name="Lock" parent="Map" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="MapBackgroundColor" parent="Map" editable="1" visibleInEditor="1" kind="3" type="1" default="#ffffff" >
</attrib>
<attrib Name="MapBodyTextColor" parent="Map" editable="1" visibleInEditor="1" type="1" default="automatic" >
</attrib>
<attrib Name="MapBodyTextSize" parent="Map" editable="1" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="MapScrollX" parent="Map" editable="1" visibleInEditor="1" type="2" canInherit="0" default="0" >
</attrib>
<attrib Name="MapScrollY" parent="Map" editable="1" visibleInEditor="1" type="2" canInherit="0" default="0" >
</attrib>
<attrib Name="MapTextSize" parent="Map" editable="1" visibleInEditor="1" type="2" default="100" >
</attrib>
<attrib Name="NameAlignment" parent="Map" editable="1" visibleInEditor="1" default="left" >
</attrib>
<attrib Name="NameBold" parent="Map" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="NameColor" parent="Map" editable="1" visibleInEditor="1" type="1" default="automatic" >
</attrib>
<attrib Name="NameFont" parent="Map" editable="1" visibleInEditor="1" kind="2" default="Lucida Grande" >
</attrib>
<attrib Name="NameLeading" parent="Map" editable="1" visibleInEditor="1" type="2" default="-1" >
</attrib>
<attrib Name="NameStrike" parent="Map" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="Sticky" parent="Map" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="TableExpression" parent="Map" editable="1" visibleInEditor="1" type="7" default="" >
</attrib>
<attrib Name="TableHeading" parent="Map" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="TitleHeight" parent="Map" editable="1" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="Width" parent="Map" editable="1" visibleInEditor="1" type="2" canInherit="0" default="3" >
</attrib>
<attrib Name="Xpos" parent="Map" editable="1" visibleInEditor="1" type="2" canInherit="0" default="0" >
</attrib>
<attrib Name="Ypos" parent="Map" editable="1" visibleInEditor="1" type="2" canInherit="0" default="0" >
</attrib>
</attrib>
<attrib Name="Net" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="AutoFetch" parent="Net" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="AutoFetchCommand" parent="Net" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="LastFetched" parent="Net" editable="0" visibleInEditor="1" type="5" canInherit="0" default="never" >
</attrib>
<attrib Name="RSSChannelTemplate" parent="Net" editable="1" visibleInEditor="1" default="RSSChannel" >
</attrib>
<attrib Name="RSSItemLimit" parent="Net" editable="1" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="RSSItemTemplate" parent="Net" editable="1" visibleInEditor="1" default="RSSItem" >
</attrib>
<attrib Name="RawData" parent="Net" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="URL" parent="Net" editable="1" visibleInEditor="1" type="9" default="" >
</attrib>
<attrib Name="ViewInBrowser" parent="Net" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
</attrib>
<attrib Name="Outline" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="MapPrototypeColor" parent="Outline" editable="1" visibleInEditor="1" kind="13" type="1" default="#ddeedd" >
</attrib>
<attrib Name="OutlineBackgroundColor" parent="Outline" editable="1" visibleInEditor="1" type="1" default="automatic" >
</attrib>
<attrib Name="OutlineColorSwatch" parent="Outline" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="OutlineTextSize" parent="Outline" editable="1" visibleInEditor="1" type="2" default="100" >
</attrib>
<attrib Name="Separator" parent="Outline" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
</attrib>
<attrib Name="People" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="AIM" parent="People" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="Address" parent="People" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="Email" parent="People" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="FullName" parent="People" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="Organization" parent="People" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="Telephone" parent="People" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="Twitter" parent="People" editable="1" visibleInEditor="1" default="" >
</attrib>
</attrib>
<attrib Name="Simplenote" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="SimplenoteKey" parent="Simplenote" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="SimplenoteModified" parent="Simplenote" editable="1" visibleInEditor="1" type="5" default="never" >
</attrib>
</attrib>
<attrib Name="Sorting" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="Sort" parent="Sorting" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="SortAlso" parent="Sorting" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="SortAlsoTransform" parent="Sorting" editable="1" visibleInEditor="1" default="case-sensitive" >
</attrib>
<attrib Name="SortBackward" parent="Sorting" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="SortBackwardAlso" parent="Sorting" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="SortTransform" parent="Sorting" editable="1" visibleInEditor="1" default="case-sensitive" >
</attrib>
</attrib>
<attrib Name="TextFormat" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="AutomaticIndent" parent="TextFormat" editable="1" visibleInEditor="1" kind="23" type="4" default="true" >
</attrib>
<attrib Name="KeyAttributes" parent="TextFormat" editable="1" visibleInEditor="1" type="8" default="" >
</attrib>
<attrib Name="LeftMargin" parent="TextFormat" editable="1" visibleInEditor="1" kind="15" type="2" default="2" >
</attrib>
<attrib Name="LineSpacing" parent="TextFormat" editable="1" visibleInEditor="1" type="2" default="100" >
</attrib>
<attrib Name="ParagraphSpacing" parent="TextFormat" editable="1" visibleInEditor="1" kind="14" type="2" default="2" >
</attrib>
<attrib Name="RightMargin" parent="TextFormat" editable="1" visibleInEditor="1" kind="16" type="2" default="-2" >
</attrib>
<attrib Name="ShowTitle" parent="TextFormat" editable="1" visibleInEditor="1" kind="5" type="4" default="true" >
</attrib>
<attrib Name="Tabs" parent="TextFormat" editable="1" visibleInEditor="1" default="0.25;" >
</attrib>
<attrib Name="TextAlign" parent="TextFormat" editable="1" visibleInEditor="1" kind="22" default="" >
</attrib>
<attrib Name="TextBackgroundColor" parent="TextFormat" editable="1" visibleInEditor="1" kind="8" type="1" default="#ffffff" >
</attrib>
<attrib Name="TextColor" parent="TextFormat" editable="1" visibleInEditor="1" kind="7" type="1" default="#000000" >
</attrib>
<attrib Name="TextFont" parent="TextFormat" editable="1" visibleInEditor="1" kind="18" default="Monaco" >
</attrib>
<attrib Name="TextFontSize" parent="TextFormat" editable="1" visibleInEditor="1" kind="19" type="2" default="12" >
</attrib>
<attrib Name="TextSidebar" parent="TextFormat" editable="1" visibleInEditor="1" kind="17" type="4" default="false" >
</attrib>
<attrib Name="TitleBackgroundColor" parent="TextFormat" editable="1" visibleInEditor="1" kind="12" type="1" default="#000000" >
</attrib>
<attrib Name="TitleFont" parent="TextFormat" editable="1" visibleInEditor="1" kind="4" default="Lucida Grande" >
</attrib>
<attrib Name="TitleForegroundColor" parent="TextFormat" editable="1" visibleInEditor="1" kind="11" type="1" default="#ffffff" >
</attrib>
</attrib>
<attrib Name="Textual" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="ReadOnly" parent="Textual" editable="1" visibleInEditor="1" type="4" default="false" >
</attrib>
<attrib Name="Text" parent="Textual" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="TextExportTemplate" parent="Textual" editable="1" visibleInEditor="1" kind="10" default="Portafilter:Users:lorchard:Applications:Tinderbox.app:Contents:MacOS:templates:text:title and text" >
</attrib>
<attrib Name="TextLength" parent="Textual" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="WordCount" parent="Textual" editable="0" visibleInEditor="1" type="2" default="0" >
</attrib>
<attrib Name="Wordcount" parent="Textual" editable="0" visibleInEditor="0" type="2" default="0" >
</attrib>
</attrib>
<attrib Name="Weblog" parent="System" editable="0" visibleInEditor="1" default="" >
<attrib Name="WeblogPostID" parent="Weblog" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="mt_allow_comments" parent="Weblog" editable="1" visibleInEditor="1" type="2" default="1" >
</attrib>
<attrib Name="mt_allow_pings" parent="Weblog" editable="1" visibleInEditor="1" type="2" default="1" >
</attrib>
<attrib Name="mt_convert_breaks" parent="Weblog" editable="1" visibleInEditor="1" default="" >
</attrib>
<attrib Name="mt_keywords" parent="Weblog" editable="1" visibleInEditor="1" default="" >
</attrib>
</attrib>
</attrib>
<attrib Name="User" parent="anything" editable="0" visibleInEditor="1" default="" >
<attrib Name="id" parent="User" editable="1" visibleInEditor="1" type="2" sequential="1" default="57" >
</attrib>
</attrib>
</attrib>
<colors >
<color name="black" color="#000000"  />
<color name="blue" color="#003366"  />
<color name="bright blue" color="#0000ff"  />
<color name="bright green" color="#00ff00"  />
<color name="bright red" color="#ff0000"  />
<color name="cool gray" color="#607080"  />
<color name="cool gray dark" color="#505860"  />
<color name="cyan" color="#006666"  />
<color name="green" color="#009900"  />
<color name="magenta" color="#660066"  />
<color name="normal" color="#ffffff"  />
<color name="orange" color="#ff8800"  />
<color name="poppy" color="#ffcc66"  />
<color name="red" color="#990000"  />
<color name="warm gray" color="#807060"  />
<color name="warm gray dark" color="#605850"  />
<color name="white" color="#ffffff"  />
<color name="yellow" color="#cccc00"  />
</colors>
<menu name="Value" kind="stamps" >
</menu>
<linkTypes >
<linkType name="*untitled" label="" visible="1" showLabel="0" color="#000000" colorString="#000000" style="0"  />
<linkType name="agree" visible="1" showLabel="1" color="#000000" colorString="#000000" style="0"  />
<linkType name="clarify" visible="1" showLabel="1" color="#000000" colorString="#000000" style="0"  />
<linkType name="disagree" visible="1" showLabel="1" color="#000000" colorString="#000000" style="0"  />
<linkType name="example" visible="1" showLabel="1" color="#000000" colorString="#000000" style="0"  />
<linkType name="exception" visible="1" showLabel="1" color="#000000" colorString="#000000" style="0"  />
<linkType name="note" visible="1" showLabel="1" color="#666666" colorString="#666666" style="0"  />
<linkType name="note+" visible="1" showLabel="1" color="#444444" colorString="#444444" style="0"  />
<linkType name="prototype" visible="0" showLabel="1" color="#993333" colorString="#993333" style="0"  />
<linkType name="response" visible="1" showLabel="1" color="#000000" colorString="#000000" style="0"  />
<linkType name="update" visible="1" showLabel="1" color="#000000" colorString="#000000" style="0"  />
</linkTypes>
<item ID="3358536108" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:38:00-04:00</attribute>
<attribute name="Modified" >2010-06-04T22:38:00-04:00</attribute>
<attribute name="Name" >article</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<item ID="3358536123" Creator="lmorchard" >
<attribute name="Address" >http://lmorchard.com/</attribute>
<attribute name="Created" >2010-06-04T22:42:00-04:00</attribute>
<attribute name="Email" >l.m.orchard@pobox.com</attribute>
<attribute name="FullName" >l.m.orchard</attribute>
<attribute name="HTMLExportFileName" >article</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-07T01:20:00-04:00</attribute>
<attribute name="Name" >Creating an article in HTML with Tinderbox</attribute>
<attribute name="ReadCount" >182</attribute>
<attribute name="SelectionCount" >253</attribute>
<attribute name="Twitter" >lmorchard</attribute>
<attribute name="WindowPlace" >Rect[ 530 120 1084 608]</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >1</attribute>
<text >This is a tutorial on writing an article with [Tinderbox][] for publication as HTML. In fact, this tutorial was written using Tinderbox, so it&apos;ll serve as its own example. You&apos;re reading the HTML export now, and the complete source documents can be [found here on GitHub][github].[github]: http://github.com/lmorchard/tinderbox-article-tutorial[tinderbox]: http://www.eastgate.com/Tinderbox/</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 This is a tutorial on writing an article with [Tinderbox][] for publication as HTML. In fact, this tutorial was written using Tinderbox, so it&apos;ll serve as its own example. You&apos;re reading the HTML export now, and the complete source documents can be [found here on GitHub][github].\par
\par
[github]: http://github.com/lmorchard/tinderbox-article-tutorial\par
[tinderbox]: http://www.eastgate.com/Tinderbox/\par
}}
</rtf>
<item ID="3358537083" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:58:00-04:00</attribute>
<attribute name="Modified" >2010-06-07T01:14:00-04:00</attribute>
<attribute name="Name" >Writing an article in Tinderbox</attribute>
<attribute name="ReadCount" >49</attribute>
<attribute name="SelectionCount" >93</attribute>
<attribute name="WindowPlace" >Rect[ 352 278 955 798]</attribute>
<attribute name="Xpos" >2</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >2</attribute>
<text >I&apos;ll build things up incrementally throughout the tutorial, documenting something close to the actual process I went through along the way. Following along with the final product may help you—though building your own may help more.[github]: http://github.com/lmorchard/tinderbox-article-tutorial[tinderbox]: http://www.eastgate.com/Tinderbox/[eastgate]: http://www.eastgate.com/</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 \par
I&apos;ll build things up incrementally throughout the tutorial, documenting something close to the actual process I went through along the way. Following along with the final product may help you{\strike \u8212 }though building your own may help more.\par
\par
[github]: http://github.com/lmorchard/tinderbox-article-tutorial\par
[tinderbox]: http://www.eastgate.com/Tinderbox/\par
[eastgate]: http://www.eastgate.com/}}
</rtf>
<strike >192 1 </strike>
<item ID="3358536301" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:45:00-04:00</attribute>
<attribute name="Modified" >2010-06-05T15:14:00-04:00</attribute>
<attribute name="Name" >Outline the article&apos;s sections</attribute>
<attribute name="ReadCount" >49</attribute>
<attribute name="SelectionCount" >55</attribute>
<attribute name="WindowPlace" >Rect[ 330 237 986 706]</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >3</attribute>
<text >The first thing to do is to create a new document, which opens up as an Outline View by default.  Hit return to create your first *note*, and type the title &quot;Creating an HTML5 Article with Tinderbox&quot;:![010-outline][]Now, if you hit Shift-Return, you&apos;ll create a child note under the first one. Type the title of your second note, &quot;Outline your article&apos;s sections&quot;.  After that, hit Return, and you can start typing the title of the next note.  Your outline is now well under way:![020-outline-2][]This is basic outlining, one of the simpler features of Tinderbox and many productivity applications. Continue like this, sketching out the structure of what you plan to write. You can drag notes around to rearrange them, delete them, do whatever you like with the outline. Note that [Tinderbox][] offers many further tools for capturing and visualizing your thoughts, but we&apos;ll stick with the Outline View for now.[tinderbox]: http://www.eastgate.com/Tinderbox/[010-outline]: img/010-outline.png &quot;A new outline&quot;[020-outline-2]: img/020-outline-2.png &quot;An outline in progress&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 The first thing to do is to create a new document, which opens up as an Outline View by default.  Hit return to create your first *note*, and type the title &quot;Creating an HTML5 Article with Tinderbox&quot;:\par
![010-outline][]\par
\par
Now, if you hit Shift-Return, you&apos;ll create a child note under the first one. Type the title of your second note, &quot;Outline your article&apos;s sections&quot;.  After that, hit Return, and you can start typing the title of the next note.  Your outline is now well under way:\par
![020-outline-2][]\par
\par
This is basic outlining, one of the simpler features of Tinderbox and many productivity applications. Continue like this, sketching out the structure of what you plan to write. You can drag notes around to rearrange them, delete them, do whatever you like with the outline. Note that [Tinderbox][] offers many further tools for capturing and visualizing your thoughts, but we&apos;ll stick with the Outline View for now.\par
\par
[tinderbox]: http://www.eastgate.com/Tinderbox/\par
[010-outline]: img/010-outline.png &quot;A new outline&quot;\par
[020-outline-2]: img/020-outline-2.png &quot;An outline in progress&quot;\par
\par
}}
</rtf>
</item>
<item ID="3358536361" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:46:00-04:00</attribute>
<attribute name="Modified" >2010-06-06T00:31:00-04:00</attribute>
<attribute name="Name" >Write the article&apos;s text in notes</attribute>
<attribute name="ReadCount" >43</attribute>
<attribute name="SelectionCount" >67</attribute>
<attribute name="WindowPlace" >Rect[ 205 265 909 838]</attribute>
<attribute name="Xpos" >3.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >4</attribute>
<text >Once you&apos;ve got an outline for your article in good shape, it&apos;s time to start writing the text of the article itself. Really, you can bounce back and forth between outlining and writing prose—Tinderbox doesn&apos;t impose a process—but this is a good time to introduce the latter.In [Tinderbox][], notes have many attributes. So far, you&apos;ve seen the `Name` attribute used as the titles of outline nodes. Well, notes can also contain body text. To see what I mean, click on a note to select it—say the root note of your outline—and hit the spacebar. Here&apos;s what the body text looks like for the root node of this tutorial:![021-note-text][]You can click on any note in the outline and call up a text editor with the spacebar. By using this editor, you can work on writing the actual content of your article.But, clicking on each note and hitting the spacebar can get tedious after awhile. [Tinderbox][] offers another View to make editing easier across a complex document. Select `View &gt; New Explorer View` from the menu, and you&apos;ll see something like this window:![025-explorer-view][]The Explorer View is a split window combining both a text editor with another view type. By default, this will show your outline. Here, you can click on the title of a note, and its text appears in the editor. This should make it easier to jump back and forth between sections, and even perform some tweaks to the outline itself. One of the main drawbacks of using the Explorer View, though, is that it&apos;s difficult to compare the text of two notes side-by-side. However, Tinderbox lets you easily switch between multiple views on the same document, so nothing keeps you from using whatever tool makes sense from moment to moment.[021-note-text]: img/021-note-text.png &quot;Note body text editor&quot;[025-explorer-view]: img/025-explorer-view.png &quot;New Explorer view&quot;[tinderbox]: http://www.eastgate.com/Tinderbox/</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 Once you&apos;ve got an outline for your article in good shape, it&apos;s time to start writing the text of the article itself. Really, you can bounce back and forth between outlining and writing prose\u8212 Tinderbox doesn&apos;t impose a process\u8212 but this is a good time to introduce the latter.\par
\par
In [Tinderbox][], notes have many attributes. So far, you&apos;ve seen the `Name` attribute used as the titles of outline nodes. Well, notes can also contain body text. To see what I mean, click on a note to select it\u8212 say the root note of your outline\u8212 and hit the spacebar. Here&apos;s what the body text looks like for the root node of this tutorial:\par
![021-note-text][]\par
\par
You can click on any note in the outline and call up a text editor with the spacebar. By using this editor, you can work on writing the actual content of your article.\par
\par
But, clicking on each note and hitting the spacebar can get tedious after awhile. [Tinderbox][] offers another View to make editing easier across a complex document. Select `View &gt; New Explorer View` from the menu, and you&apos;ll see something like this window:\par
![025-explorer-view][]\par
\par
The Explorer View is a split window combining both a text editor with another view type. By default, this will show your outline. Here, you can click on the title of a note, and its text appears in the editor. This should make it easier to jump back and forth between sections, and even perform some tweaks to the outline itself. \par
\par
One of the main drawbacks of using the Explorer View, though, is that it&apos;s difficult to compare the text of two notes side-by-side. However, Tinderbox lets you easily switch between multiple views on the same document, so nothing keeps you from using whatever tool makes sense from moment to moment.\par
\par
[021-note-text]: img/021-note-text.png &quot;Note body text editor&quot;\par
[025-explorer-view]: img/025-explorer-view.png &quot;New Explorer view&quot;\par
[tinderbox]: http://www.eastgate.com/Tinderbox/}}
</rtf>
</item>
</item>
<item ID="3358536541" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:49:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-05T17:01:00-04:00</attribute>
<attribute name="Name" >Using prototypes to augment notes</attribute>
<attribute name="ReadCount" >45</attribute>
<attribute name="SelectionCount" >78</attribute>
<attribute name="WindowPlace" >Rect[ 693 79 1297 636]</attribute>
<attribute name="Xpos" >3</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >12</attribute>
<text >Spreadsheets and relational databases center around rows and columns. Similarly, Tinderbox centers around notes and attributes. For the most part, the attributes of your notes have been invisible, since you&apos;ve been dealing mainly with names and body text. But, you&apos;re about to get a bit more acquainted with what goes on under the hood of your notes.In Tinderbox, you can create a special kind of note called a *prototype*. A prototype, as its name suggests, can serve as the basis for many other notes. You can create a prototype and assign values to its attributes, and those values will be used as defaults for other notes using that prototype. Furthermore, if you change an attribute on a prototype, other notes using the prototype will inherit the changes to their defaults.Now, say you&apos;re done composing the content of your article. You&apos;ve gotten the outline structured to your satisfaction, and let&apos;s say you&apos;ve written everything you want for a first draft. It&apos;s time to begin preparing the document for the production of an HTML page.[github]: http://github.com/lmorchard/tinderbox-article-tutorial[tinderbox]: http://www.eastgate.com/Tinderbox/[eastgate]: http://www.eastgate.com/</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 Spreadsheets and relational databases center around rows and columns. Similarly, Tinderbox centers around notes and attributes. For the most part, the attributes of your notes have been invisible, since you&apos;ve been dealing mainly with names and body text. But, you&apos;re about to get a bit more acquainted with what goes on under the hood of your notes.\par
\par
In Tinderbox, you can create a special kind of note called a *prototype*. A prototype, as its name suggests, can serve as the basis for many other notes. You can create a prototype and assign values to its attributes, and those values will be used as defaults for other notes using that prototype. Furthermore, if you change an attribute on a prototype, other notes using the prototype will inherit the changes to their defaults.\par
\par
Now, say you&apos;re done composing the content of your article. You&apos;ve gotten the outline structured to your satisfaction, and let&apos;s say you&apos;ve written everything you want for a first draft. It&apos;s time to begin preparing the document for the production of an HTML page.\par
\par
[github]: http://github.com/lmorchard/tinderbox-article-tutorial\par
[tinderbox]: http://www.eastgate.com/Tinderbox/\par
[eastgate]: http://www.eastgate.com/}}
</rtf>
<item ID="3358536961" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:56:00-04:00</attribute>
<attribute name="Modified" >2010-06-06T00:38:00-04:00</attribute>
<attribute name="Name" >Creating an &quot;Internals&quot; note to contain utilities</attribute>
<attribute name="ReadCount" >47</attribute>
<attribute name="SelectionCount" >68</attribute>
<attribute name="WindowPlace" >Rect[ 589 242 1214 855]</attribute>
<attribute name="Xpos" >3</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >6</attribute>
<text >First, in order to keep things clean, you&apos;re going to create a new note to contain the export machinery you&apos;ll soon need. Select the root note of your article.  But, rather than just hitting return to create a new outline item, hit Cmd-K to summon the full Create Note dialog window:![050-internals][]In this dialog, you can control quite a number of different attributes and options. But, ignore most of them for now. Just type the name &quot;Internals&quot; and, for good measure, check the &quot;Separator&quot; box. This will create a new note like the following:![060-internals][]Checking &quot;Separator&quot; served both to sneak in a new example of a Tinderbox feature, as well as to make this special new container stand apart from the article content. I prefer doing this to help make a clear distinction between the content I&apos;m working on and the notes I accumulate to help process that content.Also, notice I got a little ahead of things in the screenshot above: Two additional notes should be added as children to &quot;Internals&quot;, respectively named &quot;Prototypes&quot; and &quot;Templates&quot;. These will serve as containers for further resources created throughout the tutorial.[050-internals]: img/050-internals.png &quot;Creating the internals note&quot;[060-internals]: img/060-internals.png &quot;The internals note in the outline&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 First, in order to keep things clean, you&apos;re going to create a new note to contain the export machinery you&apos;ll soon need. \par
\par
Select the root note of your article.  But, rather than just hitting return to create a new outline item, hit Cmd-K to summon the full Create Note dialog window:\par
![050-internals][]\par
\par
In this dialog, you can control quite a number of different attributes and options. But, ignore most of them for now. Just type the name &quot;Internals&quot; and, for good measure, check the &quot;Separator&quot; box. This will create a new note like the following:\par
![060-internals][]\par
\par
Checking &quot;Separator&quot; served both to sneak in a new example of a Tinderbox feature, as well as to make this special new container stand apart from the article content. I prefer doing this to help make a clear distinction between the content I&apos;m working on and the notes I accumulate to help process that content.\par
\par
Also, notice I got a little ahead of things in the screenshot above: Two additional notes should be added as children to &quot;Internals&quot;, respectively named &quot;Prototypes&quot; and &quot;Templates&quot;. These will serve as containers for further resources created throughout the tutorial.\par
\par
[050-internals]: img/050-internals.png &quot;Creating the internals note&quot;\par
[060-internals]: img/060-internals.png &quot;The internals note in the outline&quot;}}
</rtf>
</item>
<item ID="3358536901" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:55:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T00:40:00-04:00</attribute>
<attribute name="Name" >Creating the *article prototype</attribute>
<attribute name="ReadCount" >85</attribute>
<attribute name="SelectionCount" >108</attribute>
<attribute name="WindowPlace" >Rect[ 374 282 1051 743]</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >13</attribute>
<text >Next, to further explore prototypes, create a child note named &quot;`*article`&quot; under the Prototypes note in Internals. Why the name `*article`? No technical reason, really; name it whatever you like. I prefer to use peculiar names for notes that have special purposes—not unlike using the separator style for the Internals container.Now, either right-click and select Rename from the context menu, or hit Enter. (That&apos;s *Enter*, mind you, not *Return*. On my MacBook Pro, this is Fn-Return.) This will summon up the note details dialog, not unlike the one used to create the Internals note earlier:![070-article-create][]In this dialog, check the box next to &quot;Can be a prototype&quot; and click Ok. This note is now a prototype.  Next, to use the new prototype, select the root note of your article and summon the note dialog with either the right-click menu or the Enter key:![080-article-prototype][]Notice the drop down selection for Prototype. In this list, you should see the name of your new prototype `*article`—select it and hit Ok. Now, your root article note is an instance of the prototype `*article`.[080-article-prototype]: img/080-article-prototype.png &quot;Using the article prototype&quot;[070-article-create]: img/070-article-create.png &quot;Creating the article prototype&quot;[github]: http://github.com/lmorchard/tinderbox-article-tutorial[tinderbox]: http://www.eastgate.com/Tinderbox/[eastgate]: http://www.eastgate.com/</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 Next, to further explore prototypes, create a child note named &quot;`*article`&quot; under the Prototypes note in Internals. Why the name `*article`? No technical reason, really; name it whatever you like. I prefer to use peculiar names for notes that have special purposes\u8212 not unlike using the separator style for the Internals container.\par
\par
Now, either right-click and select Rename from the context menu, or hit Enter. (That&apos;s *Enter*, mind you, not *Return*. On my MacBook Pro, this is Fn-Return.) This will summon up the note details dialog, not unlike the one used to create the Internals note earlier:\par
![070-article-create][]\par
\par
In this dialog, check the box next to &quot;Can be a prototype&quot; and click Ok. This note is now a prototype.  \par
\par
Next, to use the new prototype, select the root note of your article and summon the note dialog with either the right-click menu or the Enter key:\par
![080-article-prototype][]\par
\par
Notice the drop down selection for Prototype. In this list, you should see the name of your new prototype `*article`\u8212 select it and hit Ok. Now, your root article note is an instance of the prototype `*article`.\par
\par
[080-article-prototype]: img/080-article-prototype.png &quot;Using the article prototype&quot;\par
[070-article-create]: img/070-article-create.png &quot;Creating the article prototype&quot;\par
\par
[github]: http://github.com/lmorchard/tinderbox-article-tutorial\par
[tinderbox]: http://www.eastgate.com/Tinderbox/\par
[eastgate]: http://www.eastgate.com/}}
</rtf>
<item ID="3358602481" Creator="lmorchard" >
<attribute name="Created" >2010-06-05T17:08:00-04:00</attribute>
<attribute name="Modified" >2010-06-06T00:41:00-04:00</attribute>
<attribute name="Name" >Using badges in outlines with prototypes</attribute>
<attribute name="ReadCount" >21</attribute>
<attribute name="SelectionCount" >35</attribute>
<attribute name="WindowPlace" >Rect[ 423 179 1062 753]</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >48</attribute>
<text >To demonstrate how prototype inheritance works, I&apos;ll introduce another interesting feature of Tinderbox outlines called *badges*. Just to the left of the note title for `*article`, there should be a bit of empty space. Right-click here, and you should see a list of icons like these:![090-article-badge][]Pick one of these—I used &quot;web&quot;, myself—and you should notice that not only does the prototype now have an icon next to it, so does the root note of your article:![091-article-badge-applied][]This works because the badge you picked is assigned by Tinderbox to the `Badge` attribute of the `*article` prototype. And, since your article&apos;s root node is an instance of the `*article` prototype, it received the same value for its `Badge` attribute as well. [091-article-badge-applied]: img/091-article-badge-applied.png &quot;Prototype badge inherited&quot;[090-article-badge]: img/090-article-badge.png &quot;Picking the article badge&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 To demonstrate how prototype inheritance works, I&apos;ll introduce another interesting feature of Tinderbox outlines called *badges*. \par
\par
Just to the left of the note title for `*article`, there should be a bit of empty space. Right-click here, and you should see a list of icons like these:\par
![090-article-badge][]\par
\par
Pick one of these\u8212 I used &quot;web&quot;, myself\u8212 and you should notice that not only does the prototype now have an icon next to it, so does the root note of your article:\par
![091-article-badge-applied][]\par
\par
This works because the badge you picked is assigned by Tinderbox to the `Badge` attribute of the `*article` prototype. And, since your article&apos;s root node is an instance of the `*article` prototype, it received the same value for its `Badge` attribute as well. \par
\par
[091-article-badge-applied]: img/091-article-badge-applied.png &quot;Prototype badge inherited&quot;\par
[090-article-badge]: img/090-article-badge.png &quot;Picking the article badge&quot;}}
</rtf>
</item>
</item>
<item ID="3358536902" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:55:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T00:45:00-04:00</attribute>
<attribute name="Name" >Creating the *section prototype</attribute>
<attribute name="ReadCount" >49</attribute>
<attribute name="SelectionCount" >73</attribute>
<attribute name="WindowPlace" >Rect[ 411 197 1064 794]</attribute>
<attribute name="Xpos" >3.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >16</attribute>
<text >The next prototype to create should be named &quot;`*section`&quot;. This one will be used for all the sections and sub-sections in your article. Create it in the same way you created `*article`—that is: create the note, summon the note details dialog, ensure &quot;Can be a prototype&quot; is checked.After you&apos;ve created a `*section` prototype, give it a badge. I used &quot;arrow right&quot; in my document:![101-section-badge][]I&apos;ve also given a &quot;folder&quot; badge to some other container notes: These are purely ornamental, helping keep track visually of the purposes that various notes serve. Now, select your article&apos;s root note, select `View &gt; Expand All` to reveal all sections. Select all of these sections, by clicking the first and then clicking the last in the list while holding shift.  The selection should look like this:![110-select-sections][]Once you&apos;ve got sections selected, it&apos;s time for another interesting tool in the Tinderbox, called *Quickstamp*. Either hit Cmd-1 or pick `Window &gt; Inspector` from the menu. You&apos;ll see a dialog like this one:![111-quickstamp-sections][]With this dialog, you can quickly assign a value for a given attribute onto many notes at once. Select the &quot;General&quot; category from the first drop down, and then &quot;Prototype&quot; from the second. Type &quot;`*section`&quot; into the Value field, and click Apply.Almost instantly, you should see the badge from your `*section` prototype appear on all the sections you&apos;ve selected in your outline:![112-section-applied][]As the spread of the decorative badge demonstrates, the prototype inheritance mechanism has propagated the badge change to all notes using `*section` as a prototype. This will come in handy beyond badges before the tutorial is done.[112-section-applied]: img/112-section-applied.png &quot;Section prototype applied&quot;[111-quickstamp-sections]: img/111-quickstamp-sections.png &quot;Quickstamp dialog&quot;[110-select-sections]: img/110-select-sections.png &quot;Select all sections&quot;[101-section-badge]: img/101-section-badge.png &quot;Section prototype with badge&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 The next prototype to create should be named &quot;`*section`&quot;. This one will be used for all the sections and sub-sections in your article. Create it in the same way you created `*article`\u8212 that is: create the note, summon the note details dialog, ensure &quot;Can be a prototype&quot; is checked.\par
\par
After you&apos;ve created a `*section` prototype, give it a badge. I used &quot;arrow right&quot; in my document:\par
![101-section-badge][]\par
\par
I&apos;ve also given a &quot;folder&quot; badge to some other container notes: These are purely ornamental, helping keep track visually of the purposes that various notes serve. Now, select your article&apos;s root note, select `View &gt; Expand All` to reveal all sections. Select all of these sections, by clicking the first and then clicking the last in the list while holding shift.  The selection should look like this:\par
![110-select-sections][]\par
\par
Once you&apos;ve got sections selected, it&apos;s time for another interesting tool in the Tinderbox, called *Quickstamp*. Either hit Cmd-1 or pick `Window &gt; Inspector` from the menu. You&apos;ll see a dialog like this one:\par
![111-quickstamp-sections][]\par
\par
With this dialog, you can quickly assign a value for a given attribute onto many notes at once. Select the &quot;General&quot; category from the first drop down, and then &quot;Prototype&quot; from the second. Type &quot;`*section`&quot; into the Value field, and click Apply.\par
\par
Almost instantly, you should see the badge from your `*section` prototype appear on all the sections you&apos;ve selected in your outline:\par
![112-section-applied][]\par
\par
As the spread of the decorative badge demonstrates, the prototype inheritance mechanism has propagated the badge change to all notes using `*section` as a prototype. This will come in handy beyond badges before the tutorial is done.\par
\par
[112-section-applied]: img/112-section-applied.png &quot;Section prototype applied&quot;\par
[111-quickstamp-sections]: img/111-quickstamp-sections.png &quot;Quickstamp dialog&quot;\par
[110-select-sections]: img/110-select-sections.png &quot;Select all sections&quot;\par
[101-section-badge]: img/101-section-badge.png &quot;Section prototype with badge&quot;}}
</rtf>
</item>
<item ID="3358537981" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:13:00-04:00</attribute>
<attribute name="Modified" >2010-06-06T00:47:00-04:00</attribute>
<attribute name="Name" >Using an OnAdd rule to auto-create *section notes</attribute>
<attribute name="ReadCount" >51</attribute>
<attribute name="SelectionCount" >64</attribute>
<attribute name="WindowPlace" >Rect[ 384 210 1049 768]</attribute>
<attribute name="Xpos" >10.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >19</attribute>
<text >There&apos;s one more way to apply a prototype that&apos;s worth showing here. You&apos;ve applied a prototype to a single note, and then used Quickstamp to apply a prototype to many notes. But, those are manual processes—wouldn&apos;t it be nice if you could get a prototype automatically applied to certain notes when you create them?As it turns out, this something the &quot;OnAdd Action&quot; field in the note details dialog can do. Open up the details for the `*article` prototype, and type in the following OnAdd Action field:    if ($Prototype=&quot;&quot;) { $Prototype=&quot;*section&quot; } The dialog should look like this before you hit Ok:![120-onadd][]Repeat this process with the `*section` prototype.What should happen in your document now is that whenever you add a new note to your document under notes using the `*article` or `*section` prototype, that new child will be assigned to the `*section` prototype—unless it already has a prototype (eg. having been dragged in from elsewhere, or having been given a prototype by other means).  This is pretty powerful: It means that you can set up outline container notes that establish defaults over their contents without requiring manual work beyond creating children.[120-onadd]: img/120-onadd.png &quot;OnAdd rule for sections&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 There&apos;s one more way to apply a prototype that&apos;s worth showing here. You&apos;ve applied a prototype to a single note, and then used Quickstamp to apply a prototype to many notes. But, those are manual processes\u8212 wouldn&apos;t it be nice if you could get a prototype automatically applied to certain notes when you create them?\par
\par
As it turns out, this something the &quot;OnAdd Action&quot; field in the note details dialog can do. Open up the details for the `*article` prototype, and type in the following OnAdd Action field:\par
\par
    if ($Prototype=&quot;&quot;) \{ $Prototype=&quot;*section&quot; \} \par
\par
The dialog should look like this before you hit Ok:\par
![120-onadd][]\par
\par
Repeat this process with the `*section` prototype.\par
\par
What should happen in your document now is that whenever you add a new note to your document under notes using the `*article` or `*section` prototype, that new child will be assigned to the `*section` prototype\u8212 unless it already has a prototype (eg. having been dragged in from elsewhere, or having been given a prototype by other means).  \par
\par
This is pretty powerful: It means that you can set up outline container notes that establish defaults over their contents without requiring manual work beyond creating children.\par
\par
[120-onadd]: img/120-onadd.png &quot;OnAdd rule for sections&quot;}}
</rtf>
</item>
</item>
<item ID="3358536841" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:54:00-04:00</attribute>
<attribute name="Modified" >2010-06-06T00:49:00-04:00</attribute>
<attribute name="Name" >Exporting the article as HTML</attribute>
<attribute name="ReadCount" >49</attribute>
<attribute name="SelectionCount" >78</attribute>
<attribute name="WindowPlace" >Rect[ 486 293 1089 741]</attribute>
<attribute name="Xpos" >10.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >20</attribute>
<text >First, you used Tinderbox as an outliner to rough out an article. Then, you used it as a word processor, writing content on top of your outline. After that, you augmented notes with prototypes describing their respective intents (ie. `*article` vs `*section`) and assigning common default attributes.This is the point where Tinderbox starts to shine: Through the use of notes, attributes, and prototypes, you can begin building automated processing and intelligence around your content. As far as the scope of this tutorial goes, though, we&apos;ll limit things to producing an HTML page from your document. To facilitate this, Tinderbox offers powerful templating and export capabilities that can be highly customized via the same tools you use to capture thoughts and create content. Most of the features you&apos;ve seen up to this point in the tutorial will be used again to build an HTML page from your article outline and text.</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 First, you used Tinderbox as an outliner to rough out an article. Then, you used it as a word processor, writing content on top of your outline. After that, you augmented notes with prototypes describing their respective intents (ie. `*article` vs `*section`) and assigning common default attributes.\par
\par
This is the point where Tinderbox starts to shine: Through the use of notes, attributes, and prototypes, you can begin building automated processing and intelligence around your content. \par
\par
As far as the scope of this tutorial goes, though, we&apos;ll limit things to producing an HTML page from your document. To facilitate this, Tinderbox offers powerful templating and export capabilities that can be highly customized via the same tools you use to capture thoughts and create content. Most of the features you&apos;ve seen up to this point in the tutorial will be used again to build an HTML page from your article outline and text.\par
}}
</rtf>
<item ID="3358538105" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:15:00-04:00</attribute>
<attribute name="Modified" >2010-06-05T14:16:00-04:00</attribute>
<attribute name="Name" >Creating a *template prototype</attribute>
<attribute name="ReadCount" >25</attribute>
<attribute name="SelectionCount" >29</attribute>
<attribute name="Xpos" >3.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >21</attribute>
<text >HTML export can be accomplished in Tinderbox though the use of *export templates*. If you&apos;re a web developer, you&apos;re probably already be familiar with the concept. If not, maybe think of templates as akin to [mail merge][] in word processors: A single example of output applied to many instances of structured data.Export templates in Tinderbox can be files on disk, or taken from [the text of notes in your document][note-templates]. They&apos;re built using [a set of codes][export-codes] that allow you to reference notes, output attribute values, and construct enough logic to satisfy most export needs.For this tutorial, we&apos;ll use notes for templates. So, the next step is to create a prototype named &quot;`*template`&quot; under your Internals note, like so:![130-template-prototype][]Ensure that both the &quot;Can be a prototype&quot; and &quot;Can be a template&quot; checkboxes 	are checked in the note details dialog. In my document, I also gave the `*template` prototype a &quot;design&quot; badge, so as to make them easily identifiable in outlines.[mail merge]: http://en.wikipedia.org/wiki/Mail_merge[note-templates]: http://www.acrobatfaq.com/atbref5/index/ImportExportFormatting/Notescanbeexporttemplate.html[export-codes]: http://www.acrobatfaq.com/atbref5/index/ExportCodes/ExportCodes-FullListing.html &quot;Tinderbox export codes&quot;[130-template-prototype]: img/130-template-prototype.png &quot;Creating a template prototype&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 HTML export can be accomplished in Tinderbox though the use of *export templates*. If you&apos;re a web developer, you&apos;re probably already be familiar with the concept. If not, maybe think of templates as akin to [mail merge][] in word processors: A single example of output applied to many instances of structured data.\par
\par
Export templates in Tinderbox can be files on disk, or taken from [the text of notes in your document][note-templates]. They&apos;re built using [a set of codes][export-codes] that allow you to reference notes, output attribute values, and construct enough logic to satisfy most export needs.\par
\par
For this tutorial, we&apos;ll use notes for templates. So, the next step is to create a prototype named &quot;`*template`&quot; under your Internals note, like so:\par
![130-template-prototype][]\par
\par
Ensure that both the &quot;Can be a prototype&quot; and &quot;Can be a template&quot; checkboxes \tab are checked in the note details dialog. In my document, I also gave the `*template` prototype a &quot;design&quot; badge, so as to make them easily identifiable in outlines.\par
\par
[mail merge]: http://en.wikipedia.org/wiki/Mail_merge\par
[note-templates]: http://www.acrobatfaq.com/atbref5/index/ImportExportFormatting/Notescanbeexporttemplate.html\par
[export-codes]: http://www.acrobatfaq.com/atbref5/index/ExportCodes/ExportCodes-FullListing.html &quot;Tinderbox export codes&quot;\par
[130-template-prototype]: img/130-template-prototype.png &quot;Creating a template prototype&quot;}}
</rtf>
</item>
<item ID="3358538102" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:15:00-04:00</attribute>
<attribute name="Modified" >2010-06-05T17:31:00-04:00</attribute>
<attribute name="Name" >Creating the article.html template</attribute>
<attribute name="ReadCount" >31</attribute>
<attribute name="SelectionCount" >46</attribute>
<attribute name="WindowPlace" >Rect[ 398 207 1066 634]</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >22</attribute>
<text >Alongside the Prototypes note under Internals, we also created a Templates container note. Within this note, create a new one named &quot;`article.html`&quot; using `*template` as a prototype. Your outline should now look like this:![140-article-tmpl-in-outline][]Edit the text of your new `article.html` note, pasting in the following code:	&lt;!DOCTYPE html&gt;	&lt;html&gt;		&lt;head&gt;			&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;			&lt;title&gt;^title^&lt;/title&gt;		&lt;/head&gt;		&lt;body&gt;			&lt;article&gt;				&lt;h1&gt;^title^&lt;/h1&gt;				^value($Text)^				^justChildren^			&lt;/article&gt;		&lt;/body&gt;	&lt;/html&gt;Giving a full explanation of [the export codes available for use][export-codes] in templates is beyond the scope of this tutorial, but hopefully you can make sense of most of it. It&apos;s HTML, with a few codes sprinkled in to pull content from an article note. You can add CSS and JavaScript includes if you like, and customize the markup however you like.One of the most interesting parts of this template, though, is the `^justChildren^` code: This code causes the export process to recurse into child notes in the outline, including the output of their export templates at this spot in the parent note outline.So, this `article.html` template provides the overall shell for the HTML page, including both content from the root note of the article and all its sections.[export-codes]: http://www.acrobatfaq.com/atbref5/index/ExportCodes.html[145-article-tmpl]: img/145-article-tmpl.png &quot;Article template note text&quot;[140-article-tmpl-in-outline]: img/140-article-tmpl-in-outline.png &quot;Article template in outline&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="336" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="593" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}
{\f1\fnil\fcharset77 Lucida Grande;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 Alongside the Prototypes note under Internals, we also created a Templates container note. Within this note, create a new one named &quot;`article.html`&quot; using `*template` as a prototype. Your outline should now look like this:\par
![140-article-tmpl-in-outline][]\par
\par
Edit the text of your new `article.html` note, pasting in the following code:\par
\par
{\f1 \tab &lt;!DOCTYPE html&gt;\par
\tab &lt;html&gt;\par
\tab \tab &lt;head&gt;\par
\tab \tab \tab &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\par
\tab \tab \tab &lt;title&gt;^title^&lt;/title&gt;\par
\tab \tab &lt;/head&gt;\par
\tab \tab &lt;body&gt;\par
\tab \tab \tab &lt;article&gt;\par
\tab \tab \tab \tab &lt;h1&gt;^title^&lt;/h1&gt;\par
\tab \tab \tab \tab ^value($Text)^\par
\tab \tab \tab \tab ^justChildren^\par
\tab \tab \tab &lt;/article&gt;\par
\tab \tab &lt;/body&gt;\par
\tab &lt;/html&gt;\par
}\par
Giving a full explanation of [the export codes available for use][export-codes] in templates is beyond the scope of this tutorial, but hopefully you can make sense of most of it. It&apos;s HTML, with a few codes sprinkled in to pull content from an article note. You can add CSS and JavaScript includes if you like, and customize the markup however you like.\par
\par
One of the most interesting parts of this template, though, is the `^justChildren^` code: This code causes the export process to recurse into child notes in the outline, including the output of their export templates at this spot in the parent note outline.\par
\par
So, this `article.html` template provides the overall shell for the HTML page, including both content from the root note of the article and all its sections.\par
\par
[export-codes]: http://www.acrobatfaq.com/atbref5/index/ExportCodes.html\par
[145-article-tmpl]: img/145-article-tmpl.png &quot;Article template note text&quot;\par
[140-article-tmpl-in-outline]: img/140-article-tmpl-in-outline.png &quot;Article template in outline&quot;}}
</rtf>
</item>
<item ID="3358592941" Creator="lmorchard" >
<attribute name="Created" >2010-06-05T14:29:00-04:00</attribute>
<attribute name="Height" >1</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T00:55:00-04:00</attribute>
<attribute name="Name" >Using the article.html template</attribute>
<attribute name="ReadCount" >40</attribute>
<attribute name="SelectionCount" >29</attribute>
<attribute name="Width" >3</attribute>
<attribute name="WindowPlace" >Rect[ 448 119 1080 719]</attribute>
<attribute name="Xpos" >6.5</attribute>
<attribute name="Ypos" >1</attribute>
<attribute name="id" >44</attribute>
<text >Now that you&apos;ve got a template for use in exporting an article, it&apos;s time to use it. This is a natural match for the `*article` prototype you created earlier. To pair the two together, first select the `*article` prototype note and then choose `View &gt; New HTML View` from the menu.  You should see something like this:![150-article-html-view][]Within that view dialog, there&apos;s a drop down selector for the Template field. Listed in that selector should be your new `article.html` template, so choose it. This will set this template as the default for any HTML export of any note using `*article` as its prototype. For the current document, that&apos;s just one article, but it could apply to many thanks to the prototype inheritance mechanism.Additionally, ensure that the &quot;Export&quot; and &quot;Markup text&quot; checkboxes are checked in this dialog. This will ensure the article is exported, and that the plain text content of these notes will be automatically wrapped in HTML tags according to some rules built into Tinderbox.  Note that the &quot;Export children&quot; checkbox is unchecked: This is because `article.html` uses the `^justChildren^` code to include exported children within the same HTML file, whereas &quot;Export children&quot; will cause the export process to produce separate files for all child notes. Doing both could be useful in, for example, blogs with index pages and individual entry pages displaying the same content.You should feel free to play with these settings to get a sense for what they do—their results should appear in the HTML View as a preview whenever you click the &quot;Update&quot; button. You can also use the &quot;Preview&quot; button to open the HTML in a browser of your choice, configured for the document. (To choose a browser, try `Edit &gt; Document Preferences &gt; HTML` from the menu bar.)[150-article-html-view]: img/150-article-html-view.png &quot;HTML view on *article&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 Now that you&apos;ve got a template for use in exporting an article, it&apos;s time to use it. This is a natural match for the `*article` prototype you created earlier. To pair the two together, first select the `*article` prototype note and then choose `View &gt; New HTML View` from the menu.  You should see something like this:\par
![150-article-html-view][]\par
\par
Within that view dialog, there&apos;s a drop down selector for the Template field. Listed in that selector should be your new `article.html` template, so choose it. This will set this template as the default for any HTML export of any note using `*article` as its prototype. For the current document, that&apos;s just one article, but it could apply to many thanks to the prototype inheritance mechanism.\par
\par
Additionally, ensure that the &quot;Export&quot; and &quot;Markup text&quot; checkboxes are checked in this dialog. This will ensure the article is exported, and that the plain text content of these notes will be automatically wrapped in HTML tags according to some rules built into Tinderbox.  \par
\par
Note that the &quot;Export children&quot; checkbox is unchecked: This is because `article.html` uses the `^justChildren^` code to include exported children within the same HTML file, whereas &quot;Export children&quot; will cause the export process to produce separate files for all child notes. Doing both could be useful in, for example, blogs with index pages and individual entry pages displaying the same content.\par
\par
You should feel free to play with these settings to get a sense for what they do\u8212 their results should appear in the HTML View as a preview whenever you click the &quot;Update&quot; button. You can also use the &quot;Preview&quot; button to open the HTML in a browser of your choice, configured for the document. (To choose a browser, try `Edit &gt; Document Preferences &gt; HTML` from the menu bar.)\par
\par
[150-article-html-view]: img/150-article-html-view.png &quot;HTML view on *article&quot;}}
</rtf>
</item>
<item ID="3358538522" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:22:00-04:00</attribute>
<attribute name="Modified" >2010-06-05T17:36:00-04:00</attribute>
<attribute name="Name" >Creating and using the section.html template</attribute>
<attribute name="ReadCount" >56</attribute>
<attribute name="SelectionCount" >42</attribute>
<attribute name="WindowPlace" >Rect[ 445 174 1058 721]</attribute>
<attribute name="Xpos" >10.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >25</attribute>
<text >Just as you did for `article.html`, create a new note under Internals / Templates, giving it a prototype of `*template`. Edit its text and paste in the following code:	&lt;section&gt;		&lt;h^value($OutlineDepth)^&gt;^title^&lt;/h^value($OutlineDepth)^&gt;		^value($Text)^		^justChildren^	&lt;/section&gt;This looks much like the `article.html` template, though it introduces the attribute `OutlineDepth`. You can consult [a full list of note attributes][attribs], but this particular attribute is useful for determining the depth of a section within the outline. This allows you to programmatically produce section title elements progressing from `&lt;h1&gt;` to `&lt;h6&gt;` and beyond, depending on how deeply nested a subsection is within the article.And as you did for `*article`, open a new HTML View on the `*section` prototype and select the `section.html` template to pair the two, like so:![160-section-html-view][]The impact of doing this for the `*section` prototype is more wide-ranging than for the `*article` prototype: Since `*section` is applied to most of the notes in the outline, pairing the `section.html` template to `*section` causes that template to also be paired to every section in the article.So, thanks to `^justChildren^` and the use of prototypes, the `article.html` and `section.html` templates will be used to recursively export the content from all notes in your article as HTML.[160-section-html-view]: img/160-section-html-view.png[attribs]: http://www.acrobatfaq.com/atbref5/index/Attributes/SystemAttributeList.html</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="169" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="288" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}
{\f1\fnil\fcharset77 Lucida Grande;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 Just as you did for `article.html`, create a new note under Internals / Templates, giving it a prototype of `*template`. Edit its text and paste in the following code:\par
\par
{\f1 \tab &lt;section&gt;\par
\tab \tab &lt;h^value($OutlineDepth)^&gt;^title^&lt;/h^value($OutlineDepth)^&gt;\par
\tab \tab ^value($Text)^\par
\tab \tab ^justChildren^\par
\tab &lt;/section&gt;\par
\par
}This looks much like the `article.html` template, though it introduces the attribute `OutlineDepth`. You can consult [a full list of note attributes][attribs], but this particular attribute is useful for determining the depth of a section within the outline. This allows you to programmatically produce section title elements progressing from `&lt;h1&gt;` to `&lt;h6&gt;` and beyond, depending on how deeply nested a subsection is within the article.\par
\par
And as you did for `*article`, open a new HTML View on the `*section` prototype and select the `section.html` template to pair the two, like so:\par
![160-section-html-view][]\par
\par
The impact of doing this for the `*section` prototype is more wide-ranging than for the `*article` prototype: Since `*section` is applied to most of the notes in the outline, pairing the `section.html` template to `*section` causes that template to also be paired to every section in the article.\par
\par
So, thanks to `^justChildren^` and the use of prototypes, the `article.html` and `section.html` templates will be used to recursively export the content from all notes in your article as HTML.\par
\par
[160-section-html-view]: img/160-section-html-view.png\par
[attribs]: http://www.acrobatfaq.com/atbref5/index/Attributes/SystemAttributeList.html}}
</rtf>
</item>
<item ID="3358594381" Creator="lmorchard" >
<attribute name="Created" >2010-06-05T14:53:00-04:00</attribute>
<attribute name="Height" >1</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T00:57:00-04:00</attribute>
<attribute name="Name" >Preview and perform an HTML export</attribute>
<attribute name="ReadCount" >52</attribute>
<attribute name="SelectionCount" >23</attribute>
<attribute name="Width" >3</attribute>
<attribute name="WindowPlace" >Rect[ 489 220 1080 742]</attribute>
<attribute name="Xpos" >17</attribute>
<attribute name="Ypos" >1</attribute>
<attribute name="id" >45</attribute>
<text >If you select the root note of your article and open an HTML View, you should now be able to see a preview of the full HTML page that will be exported using the templates you just created and paired with prototypes:![170-full-html-preview][]From the HTML View, you can also set a file name, extension, and destination folder for file output of the HTML export. Hitting the &quot;Export&quot; button will produce the desired file on disk. Additionally, once these attributes have been set, they&apos;ll be used as defaults in the future. This comes in handy for use with the `File &gt; Export as HTML...` menu item, which will perform HTML export on all notes without the need to open a new HTML View for each one individually. This doesn&apos;t matter as much for the present document, since there&apos;s only one article, but you can produce a collection of articles or even an entire website in this manner with just a single Tinderbox document.[170-full-html-preview]: img/170-full-html-preview.png &quot;Full HTML export preview&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 If you select the root note of your article and open an HTML View, you should now be able to see a preview of the full HTML page that will be exported using the templates you just created and paired with prototypes:\par
![170-full-html-preview][]\par
\par
From the HTML View, you can also set a file name, extension, and destination folder for file output of the HTML export. Hitting the &quot;Export&quot; button will produce the desired file on disk. \par
\par
Additionally, once these attributes have been set, they&apos;ll be used as defaults in the future. This comes in handy for use with the `File &gt; Export as HTML...` menu item, which will perform HTML export on all notes without the need to open a new HTML View for each one individually. This doesn&apos;t matter as much for the present document, since there&apos;s only one article, but you can produce a collection of articles or even an entire website in this manner with just a single Tinderbox document.\par
\par
[170-full-html-preview]: img/170-full-html-preview.png &quot;Full HTML export preview&quot;}}
</rtf>
</item>
</item>
<item ID="3358538101" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:15:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T00:59:00-04:00</attribute>
<attribute name="Name" >Refining the document and export process</attribute>
<attribute name="ReadCount" >27</attribute>
<attribute name="SelectionCount" >63</attribute>
<attribute name="WindowPlace" >Rect[ 456 220 1070 736]</attribute>
<attribute name="Xpos" >14</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >29</attribute>
<text >At this point, we&apos;re pretty much done. You got an article outlined and written, augmented it with prototypes, and set up HTML export templates. You can continue to edit the content and produce an HTML page whenever you like.But, there are a couple of rough edges left, plus a few bonus features I can throw in.  This, by the way, is one of the dangers I&apos;ve found in using Tinderbox: resisting the temptation to constantly tweak and refine documents, rather than doing the work I built the documents for in the first place.</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 At this point, we&apos;re pretty much done. You got an article outlined and written, augmented it with prototypes, and set up HTML export templates. You can continue to edit the content and produce an HTML page whenever you like.\par
\par
But, there are a couple of rough edges left, plus a few bonus features I can throw in.  This, by the way, is one of the dangers I&apos;ve found in using Tinderbox: resisting the temptation to constantly tweak and refine documents, rather than doing the work I built the documents for in the first place.\par
\par
}}
</rtf>
<item ID="3358539241" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:34:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T01:00:00-04:00</attribute>
<attribute name="Name" >Restricting which notes get exported</attribute>
<attribute name="ReadCount" >28</attribute>
<attribute name="SelectionCount" >48</attribute>
<attribute name="WindowPlace" >Rect[ 467 193 1086 781]</attribute>
<attribute name="Xpos" >7</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >40</attribute>
<text >If you tried the `File &gt; Export as HTML` menu item, you may have noticed some extra files and folders beyond the article itself appearing in your export folder. (If you haven&apos;t tried it, you might want to do so now to follow along.)This is because all notes have an attribute `HTMLDontExport` with a default value of `false`. This means that when the `Export as HTML` command scans through the entire document, all notes are exported *except* those with an `HTMLDontExport` attribute set to `true`. This attribute can be managed by the Quickstamp dialog, is also managed by the HTML View (eg. the Export checkbox), and via the `Note &gt; Get Info` menu item.There&apos;s also an attribute called `HTMLExportChildren`, which corresponds to the &quot;Export children&quot; checkbox in an HTML View. This acts like the inverse of `HTMLDontExport`, only applied to all the contents of a note.In particular, the Internals note and all of its children are not worth exporting to HTML. So, to exclude it from the process, select the note and open a new HTML View. Ensure that the &quot;Export&quot; and &quot;Export children&quot; checkboxes are unchecked.If you try another `Export as HTML` command to an empty folder, you should notice that the extra files and folders not related to your article&apos;s page are no longer generated by Tinderbox.</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 If you tried the `File &gt; Export as HTML` menu item, you may have noticed some extra files and folders beyond the article itself appearing in your export folder. (If you haven&apos;t tried it, you might want to do so now to follow along.)\par
\par
This is because all notes have an attribute `HTMLDontExport` with a default value of `false`. This means that when the `Export as HTML` command scans through the entire document, all notes are exported *except* those with an `HTMLDontExport` attribute set to `true`. This attribute can be managed by the Quickstamp dialog, is also managed by the HTML View (eg. the Export checkbox), and via the `Note &gt; Get Info` menu item.\par
\par
There&apos;s also an attribute called `HTMLExportChildren`, which corresponds to the &quot;Export children&quot; checkbox in an HTML View. This acts like the inverse of `HTMLDontExport`, only applied to all the contents of a note.\par
\par
In particular, the Internals note and all of its children are not worth exporting to HTML. So, to exclude it from the process, select the note and open a new HTML View. Ensure that the &quot;Export&quot; and &quot;Export children&quot; checkboxes are unchecked.\par
\par
If you try another `Export as HTML` command to an empty folder, you should notice that the extra files and folders not related to your article&apos;s page are no longer generated by Tinderbox.}}
</rtf>
</item>
<item ID="3358538281" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:18:00-04:00</attribute>
<attribute name="Modified" >2010-06-05T17:42:00-04:00</attribute>
<attribute name="Name" >Filtering exported text through Markdown</attribute>
<attribute name="ReadCount" >19</attribute>
<attribute name="SelectionCount" >22</attribute>
<attribute name="WindowPlace" >Rect[ 410 193 1023 782]</attribute>
<attribute name="Xpos" >3.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >31</attribute>
<text >Throughout this tutorial, you also may have noticed that I&apos;m using the [Markdown][] syntax in my article text. If you tried to do the same, you may have wondered why your HTML exports didn&apos;t seem to support this formatting scheme.As it turns out, Markdown is not built into Tinderbox. Instead, export codes offer a tool you can use during to filter text through external shell commands. [As the creator of Tinderbox explains in a blog posting][markblog], this means that you can cause Tinderbox to execute `Markdown.pl` as a text filter during the HTML export process.To do this, you&apos;ll first need to [download the Markdown script][markdownload]. I did so, and copied `Markdown.pl` to `/usr/local/bin` on my Mac.Next, edit the source of your `article.html` and `section.html` templates. Look for these lines:	 ^value($Text)^Replace these expressions with the following template code:	 ^value(runCommand(&quot;perl /usr/local/bin/Markdown.pl&quot;,$Text))^If you placed the `Markdown.pl` script in a directory other than `/usr/local/bin`, be sure to adjust the file path in `runCommand()`.Here, [the `runCommand()` operator][runcommand] does the work of executing `Markdown.pl` with your note&apos;s text as input. The output will be included in the HTML export.[runcommand]: http://www.acrobatfaq.com/atbref5/index/ActionsRules/Operators/FullOperatorList/runCommandcommandLineinp.html[markdown]: http://daringfireball.net/projects/markdown/[markblog]: http://www.markbernstein.org/Aug0701/Tinderbox4usingMarkdown.html[markdownload]: http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="818" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="834" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="893" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="895" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="897" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="957" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}
{\f1\fnil\fcharset77 Lucida Grande;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 Throughout this tutorial, you also may have noticed that I&apos;m using the [Markdown][] syntax in my article text. If you tried to do the same, you may have wondered why your HTML exports didn&apos;t seem to support this formatting scheme.\par
\par
As it turns out, Markdown is not built into Tinderbox. Instead, export codes offer a tool you can use during to filter text through external shell commands. [As the creator of Tinderbox explains in a blog posting][markblog], this means that you can cause Tinderbox to execute `Markdown.pl` as a text filter during the HTML export process.\par
\par
To do this, you&apos;ll first need to [download the Markdown script][markdownload]. I did so, and copied `Markdown.pl` to `/usr/local/bin` on my Mac.\par
\par
Next, edit the source of your `article.html` and `section.html` templates. Look for these lines:\par
\par
\tab  {\f1 ^value($Text)^\par
\par
}Replace these expressions with the following template code:{\f1 \par
\par
}\tab  {\f1 ^value(runCommand(&quot;perl /usr/local/bin/Markdown.pl&quot;,$Text))^}\par
If you placed the `Markdown.pl` script in a directory other than `/usr/local/bin`, be sure to adjust the file path in `runCommand()`.\par
\par
Here, [the `runCommand()` operator][runcommand] does the work of executing `Markdown.pl` with your note&apos;s text as input. The output will be included in the HTML export.\par
\par
[runcommand]: http://www.acrobatfaq.com/atbref5/index/ActionsRules/Operators/FullOperatorList/runCommandcommandLineinp.html\par
[markdown]: http://daringfireball.net/projects/markdown/\par
[markblog]: http://www.markbernstein.org/Aug0701/Tinderbox4usingMarkdown.html\par
[markdownload]: http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip}}
</rtf>
</item>
<item ID="3358536842" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T22:54:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T01:03:00-04:00</attribute>
<attribute name="Name" >Building anchors for within-page links</attribute>
<attribute name="ReadCount" >64</attribute>
<attribute name="SelectionCount" >48</attribute>
<attribute name="WindowPlace" >Rect[ 411 210 1060 788]</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >30</attribute>
<text >For a long document like this tutorial, including anchors within the page is useful for supporting links to specific parts from other referring pages or for building a table of contents. And, the important thing about creating page anchors is that each is given a unique identifier.By default, though, a note in Tinderbox does not have unique a identifier accessible by attribute from which to build a page anchor. However, you can create one yourself by setting up a new attribute that implements an auto-incrementing index.</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 For a long document like this tutorial, including anchors within the page is useful for supporting links to specific parts from other referring pages or for building a table of contents. And, the important thing about creating page anchors is that each is given a unique identifier.\par
\par
By default, though, a note in Tinderbox does not have unique a identifier accessible by attribute from which to build a page anchor. However, you can create one yourself by setting up a new attribute that implements an auto-incrementing index.\par
}}
</rtf>
<item ID="3358630951" Creator="lmorchard" >
<attribute name="Created" >2010-06-06T00:03:00-04:00</attribute>
<attribute name="Modified" >2010-06-06T01:05:00-04:00</attribute>
<attribute name="Name" >Creating a new auto-incrementing attribute</attribute>
<attribute name="ReadCount" >30</attribute>
<attribute name="SelectionCount" >14</attribute>
<attribute name="WindowPlace" >Rect[ 724 174 1405 860]</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >49</attribute>
<text >You see, as mentioned earlier, Tinderbox is about notes and attributes like relational databases are about rows and columns. And, like a database, Tinderbox maintains a schema describing all possible attributes for notes in a document. Each of these attributes has a name, a data type, and a default value.The [set of attributes][attribs] provided out of the box quite long, and it covers a lot of capabilities for notes. However, the built-in attributes are not always sufficient. With this in mind, Tinderbox offers the ability to change the default values of existing attributes, or to add your own new attributes to the list. It&apos;s the latter we&apos;re interested in here for the construction of page anchors.[attribs]: http://www.acrobatfaq.com/atbref5/index/Attributes/SystemAttributeList.htmlYou can summon the Attributes dialog via `Window &gt; Attributes` in the menu, or via keyboard with Cmd-2. The Attributes dialog is small, but it&apos;s very powerful: Whereas notes can inherit default attribute values from a selected prototype, changes made in the Attributes dialog window affect all notes throughout the document. The Attributes dialog looks like this:![180-attributes-dialog][]If you click the &quot;Create...&quot; button, you&apos;ll see another dialog like this one:![181-attribute-creation][]To create a new auto-incrementing attribute with this dialog, do the following:* enter a name of &quot;id&quot;; * select a type of &quot;number&quot;; * check the &quot;sequential&quot; box;* enter a default value of &quot;0&quot;;* click OK.You should now see the new user-created attribute `id` listed under the User tab of the Attribute dialog. What you didn&apos;t see is, though, is this: Upon creation of the `id` attribute, all notes in the document were automatically assigned sequential numeric values for the attribute. And, in the future, all new notes will be given the next sequential number for `id`, not unlike an auto-increment column in a database. Any notes you duplicate or copy/paste will *also* receive a new sequential number for this field, thus making it a reliable choice as unique identifier for notes.[180-attributes-dialog]: img/180-attributes-dialog.png &quot;Attributes management dialog&quot;[181-attribute-creation]: img/181-attribute-creation.png &quot;Creating a new attribute&quot;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 You see, as mentioned earlier, Tinderbox is about notes and attributes like relational databases are about rows and columns. And, like a database, Tinderbox maintains a schema describing all possible attributes for notes in a document. Each of these attributes has a name, a data type, and a default value.\par
\par
The [set of attributes][attribs] provided out of the box quite long, and it covers a lot of capabilities for notes. However, the built-in attributes are not always sufficient. With this in mind, Tinderbox offers the ability to change the default values of existing attributes, or to add your own new attributes to the list. It&apos;s the latter we&apos;re interested in here for the construction of page anchors.\par
\par
[attribs]: http://www.acrobatfaq.com/atbref5/index/Attributes/SystemAttributeList.html\par
\par
You can summon the Attributes dialog via `Window &gt; Attributes` in the menu, or via keyboard with Cmd-2. The Attributes dialog is small, but it&apos;s very powerful: Whereas notes can inherit default attribute values from a selected prototype, changes made in the Attributes dialog window affect all notes throughout the document. The Attributes dialog looks like this:\par
\par
![180-attributes-dialog][]\par
\par
If you click the &quot;Create...&quot; button, you&apos;ll see another dialog like this one:\par
\par
![181-attribute-creation][]\par
\par
To create a new auto-incrementing attribute with this dialog, do the following:\par
\par
}{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li1080\ri360\fi0\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 * enter a name of &quot;id&quot;; \par
* select a type of &quot;number&quot;; \par
* check the &quot;sequential&quot; box;\par
* enter a default value of &quot;0&quot;;\par
* click OK.\par
}{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 \par
You should now see the new user-created attribute `id` listed under the User tab of the Attribute dialog. \par
\par
What you didn&apos;t see is, though, is this: Upon creation of the `id` attribute, all notes in the document were automatically assigned sequential numeric values for the attribute. And, in the future, all new notes will be given the next sequential number for `id`, not unlike an auto-increment column in a database. Any notes you duplicate or copy/paste will *also* receive a new sequential number for this field, thus making it a reliable choice as unique identifier for notes.\par
\par
[180-attributes-dialog]: img/180-attributes-dialog.png &quot;Attributes management dialog&quot;\par
[181-attribute-creation]: img/181-attribute-creation.png &quot;Creating a new attribute&quot;}}
</rtf>
</item>
<item ID="3358630952" Creator="lmorchard" >
<attribute name="Created" >2010-06-06T00:04:00-04:00</attribute>
<attribute name="Modified" >2010-06-06T00:27:00-04:00</attribute>
<attribute name="Name" >Using the new attribute in templates</attribute>
<attribute name="ReadCount" >17</attribute>
<attribute name="SelectionCount" >13</attribute>
<attribute name="WindowPlace" >Rect[ 517 293 1183 852]</attribute>
<attribute name="Xpos" >3.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >50</attribute>
<text >Now that you&apos;ve got a reliable unique identifier for all notes in an attribute, using it in an export template is very simple. In fact, here&apos;s a revised version of the `section.html` template you can use to start generating page anchors and links in the section headers:	&lt;section id=&quot;section-^value($id)^&quot;&gt;		&lt;h^value($OutlineDepth)^&gt;			&lt;a href=&quot;#section-^value($id)^&quot;&gt;^title^&lt;/a&gt;		&lt;/h^value($OutlineDepth)^&gt;		^value($Text)^		^justChildren^	&lt;/section&gt;The changes here add a new `id` attribute to the `&lt;section&gt;` element, and an `&lt;a&gt;` link within the section header whose `href` URL points to the respective section.  If you hover over the headings of this tutorial, you should notice that this template is in use here and every heading is also a link you can copy or bookmark for later reference within the tutorial.</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="272" size="12" height="0" ascent="0" color="#000000"  />
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="458" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}
{\f1\fnil\fcharset77 Lucida Grande;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 Now that you&apos;ve got a reliable unique identifier for all notes in an attribute, using it in an export template is very simple. In fact, here&apos;s a revised version of the `section.html` template you can use to start generating page anchors and links in the section headers:\par
\par
{\f1 \tab &lt;section id=&quot;section-^value($id)^&quot;&gt;\par
\tab \tab &lt;h^value($OutlineDepth)^&gt;\par
\tab \tab \tab &lt;a href=&quot;#section-^value($id)^&quot;&gt;^title^&lt;/a&gt;\par
\tab \tab &lt;/h^value($OutlineDepth)^&gt;\par
\tab \tab ^value($Text)^\par
\tab \tab ^justChildren^\par
\tab &lt;/section&gt;}\par
\par
The changes here add a new `id` attribute to the `&lt;section&gt;` element, and an `&lt;a&gt;` link within the section header whose `href` URL points to the respective section.  If you hover over the headings of this tutorial, you should notice that this template is in use here and every heading is also a link you can copy or bookmark for later reference within the tutorial.}}
</rtf>
</item>
</item>
</item>
<item ID="3358589521" Creator="lmorchard" >
<attribute name="Created" >2010-06-05T13:32:00-04:00</attribute>
<attribute name="Modified" >2010-06-07T01:13:00-04:00</attribute>
<attribute name="Name" >Summary</attribute>
<attribute name="ReadCount" >17</attribute>
<attribute name="SelectionCount" >26</attribute>
<attribute name="WindowPlace" >Rect[ 527 177 1145 763]</attribute>
<attribute name="Xpos" >6.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >43</attribute>
<text >In this tutorial, I walked through the following in using Tinderbox:* outlining and writing an article;* augmenting article notes with prototypes;* building and using HTML export templates.The end product of this tutorial should hopefully turn out to be a starting point in producing content for the web using Tinderbox. The nice thing about the document constructed during the course of this tutorial is that you don&apos;t need to start from scratch the next time: Just clear out the article and section content from the previous use, and use the prototypes and templates as a starting point for your next article.Along the way, as you learn more features of Tinderbox, you can continue to introduce incremental improvements—please share, especially if I can include them in a future revision of this tutorial! </text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 In this tutorial, I walked through the following in using Tinderbox:\par
\par
}{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li1080\ri360\fi0\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 * outlining and writing an article;\par
* augmenting article notes with prototypes;\par
* building and using HTML export templates.\par
}{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 \par
The end product of this tutorial should hopefully turn out to be a starting point in producing content for the web using Tinderbox. \par
\par
The nice thing about the document constructed during the course of this tutorial is that you don&apos;t need to start from scratch the next time: Just clear out the article and section content from the previous use, and use the prototypes and templates as a starting point for your next article.\par
\par
Along the way, as you learn more features of Tinderbox, you can continue to introduce incremental improvements\u8212 please share, especially if I can include them in a future revision of this tutorial! \par
}}
</rtf>
</item>
</item>
<item ID="3358537261" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:01:00-04:00</attribute>
<attribute name="HTMLDontExport" >true</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-04T23:01:00-04:00</attribute>
<attribute name="Name" >Internals</attribute>
<attribute name="ReadCount" >7</attribute>
<attribute name="SelectionCount" >21</attribute>
<attribute name="Separator" >true</attribute>
<attribute name="Xpos" >3.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >32</attribute>
<item ID="3358537262" Creator="lmorchard" >
<attribute name="Badge" >folder</attribute>
<attribute name="Created" >2010-06-04T23:01:00-04:00</attribute>
<attribute name="Modified" >2010-06-04T23:01:00-04:00</attribute>
<attribute name="Name" >Prototypes</attribute>
<attribute name="ReadCount" >4</attribute>
<attribute name="SelectionCount" >14</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >33</attribute>
<item ID="3358537383" Creator="lmorchard" >
<attribute name="Badge" >web</attribute>
<attribute name="Created" >2010-06-04T23:03:00-04:00</attribute>
<attribute name="HTMLExportTemplate" >/Internals/Templates/article.html</attribute>
<attribute name="IsPrototype" >true</attribute>
<attribute name="KeyAttributes" >FullName;Email;Address;Twitter;Organization</attribute>
<attribute name="Modified" >2010-06-04T23:03:00-04:00</attribute>
<attribute name="Name" >*article</attribute>
<attribute name="OnAdd" >if ($Prototype=&quot;&quot;) { $Prototype=&quot;*section&quot; } </attribute>
<attribute name="ReadCount" >5</attribute>
<attribute name="SelectionCount" >38</attribute>
<attribute name="Xpos" >6.5</attribute>
<attribute name="Ypos" >1</attribute>
<attribute name="id" >34</attribute>
</item>
<item ID="3358537384" Creator="lmorchard" >
<attribute name="Badge" >arrow right</attribute>
<attribute name="Created" >2010-06-04T23:03:00-04:00</attribute>
<attribute name="HTMLExportTemplate" >/Internals/Templates/section.html</attribute>
<attribute name="IsPrototype" >true</attribute>
<attribute name="Modified" >2010-06-04T23:03:00-04:00</attribute>
<attribute name="Name" >*section</attribute>
<attribute name="OnAdd" >if ($Prototype=&quot;&quot;) { $Prototype=&quot;*section&quot; }</attribute>
<attribute name="ReadCount" >2</attribute>
<attribute name="SelectionCount" >25</attribute>
<attribute name="Xpos" >10</attribute>
<attribute name="Ypos" >1</attribute>
<attribute name="id" >35</attribute>
</item>
<item ID="3358538104" Creator="lmorchard" >
<attribute name="Badge" >design</attribute>
<attribute name="Created" >2010-06-04T23:15:00-04:00</attribute>
<attribute name="IsPrototype" >true</attribute>
<attribute name="IsTemplate" >true</attribute>
<attribute name="Modified" >2010-06-04T23:15:00-04:00</attribute>
<attribute name="Name" >*template</attribute>
<attribute name="ReadCount" >3</attribute>
<attribute name="SelectionCount" >9</attribute>
<attribute name="Xpos" >13.5</attribute>
<attribute name="Ypos" >1</attribute>
<attribute name="id" >36</attribute>
</item>
</item>
<item ID="3358537263" Creator="lmorchard" >
<attribute name="Badge" >folder</attribute>
<attribute name="Created" >2010-06-04T23:01:00-04:00</attribute>
<attribute name="Modified" >2010-06-04T23:01:00-04:00</attribute>
<attribute name="Name" >Templates</attribute>
<attribute name="ReadCount" >2</attribute>
<attribute name="SelectionCount" >9</attribute>
<attribute name="Xpos" >3</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >37</attribute>
<item ID="3358538103" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:15:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-07T01:25:00-04:00</attribute>
<attribute name="Name" >article.html</attribute>
<attribute name="ReadCount" >97</attribute>
<attribute name="SelectionCount" >83</attribute>
<attribute name="WindowPlace" >Rect[ 576 155 1152 629]</attribute>
<attribute name="Xpos" >0</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >38</attribute>
<text >&lt;!DOCTYPE html&gt;&lt;html&gt;	&lt;head&gt;		&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;		&lt;title&gt;^title^&lt;/title&gt;		&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/article.css&quot; /&gt;	&lt;/head&gt;	&lt;body&gt;		&lt;article id=&quot;article-^value($id)^&quot;&gt;			&lt;h1&gt;				^if($URL)^&lt;a href=&quot;^value($URL)^&quot;&gt;^title^&lt;/a&gt;				^else^&lt;a href=&quot;#article-^value($id)^&quot;&gt;^title^&lt;/a&gt;				^endIf^			&lt;/h1&gt;			&lt;p class=&quot;meta&quot;&gt;				Last updated at &lt;span class=&quot;modified&quot;&gt;^lastModified(this, &quot;*&quot;)^&lt;/span&gt;			&lt;/p&gt;					&lt;p class=&quot;author vcard&quot;&gt;				by &lt;a class=&quot;fn url&quot; href=&quot;^value($Address)^&quot;&gt;^value($FullName)^&lt;/a&gt;				^if($Email)^ / &lt;a class=&quot;email&quot; href=&quot;mailto:^value($Email)^&quot;&gt;^value($Email)^&lt;/a&gt;^endIf^				^if($Twitter)^ / &lt;a class=&quot;twitter&quot; href=&quot;http://twitter.com/^value($Twitter)^&quot;&gt;@^value($Twitter)&lt;/a&gt;^endIf^			&lt;/p&gt;			^value(runCommand(&quot;perl /usr/local/bin/Markdown.pl&quot;,($Text)))^			&lt;div class=&quot;toc&quot;&gt;				&lt;h2&gt;Table of Contents&lt;/h2&gt;				&lt;ul&gt;^justChildren(toc-section.html)^&lt;/ul&gt;			&lt;/div&gt;			^justChildren^		&lt;/article&gt;		&lt;footer&gt;&lt;p&gt;			Last updated at &lt;span class=&quot;modified&quot;&gt;^lastModified(this, &quot;*&quot;)^&lt;/span&gt;			by &lt;a class=&quot;fn url&quot; href=&quot;^value($Address)^&quot;&gt;^value($FullName)^&lt;/a&gt;			^if($Email)^ / &lt;a class=&quot;email&quot; href=&quot;mailto:^value($Email)^&quot;&gt;^value($Email)^&lt;/a&gt;^endIf^			^if($Twitter)^ / &lt;a class=&quot;twitter&quot; href=&quot;http://twitter.com/^value($Twitter)^&quot;&gt;@^value($Twitter)&lt;/a&gt;^endIf^		&lt;/p&gt;&lt;/footer&gt;		&lt;script type=&quot;text/javascript&quot; src=&quot;js/article.js&quot;&gt;&lt;/script&gt;	&lt;/body&gt;&lt;/html&gt;</text>
<styles >
 <tstyle font="Monaco" bold="0" italic="0" underline="0" start="0" size="10" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fmodern\fcharset77 Monaco;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs20\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 &lt;!DOCTYPE html&gt;\par
&lt;html&gt;\par
\tab &lt;head&gt;\par
\tab \tab &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\par
\tab \tab &lt;title&gt;^title^&lt;/title&gt;\par
\tab \tab &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/article.css&quot; /&gt;\par
\tab &lt;/head&gt;\par
\tab &lt;body&gt;\par
\tab \tab &lt;article id=&quot;article-^value($id)^&quot;&gt;\par
\tab \tab \tab &lt;h1&gt;\par
\tab \tab \tab \tab ^if($URL)^&lt;a href=&quot;^value($URL)^&quot;&gt;^title^&lt;/a&gt;\par
\tab \tab \tab \tab ^else^&lt;a href=&quot;#article-^value($id)^&quot;&gt;^title^&lt;/a&gt;\par
\tab \tab \tab \tab ^endIf^\par
\tab \tab \tab &lt;/h1&gt;\par
\tab \tab \tab &lt;p class=&quot;meta&quot;&gt;\par
\tab \tab \tab \tab Last updated at &lt;span class=&quot;modified&quot;&gt;^lastModified(this, &quot;*&quot;)^&lt;/span&gt;\par
\tab \tab \tab &lt;/p&gt;\tab \tab \par
\tab \tab \tab &lt;p class=&quot;author vcard&quot;&gt;\par
\tab \tab \tab \tab by &lt;a class=&quot;fn url&quot; href=&quot;^value($Address)^&quot;&gt;^value($FullName)^&lt;/a&gt;\par
\tab \tab \tab \tab ^if($Email)^ / &lt;a class=&quot;email&quot; href=&quot;mailto:^value($Email)^&quot;&gt;^value($Email)^&lt;/a&gt;^endIf^\par
\tab \tab \tab \tab ^if($Twitter)^ / &lt;a class=&quot;twitter&quot; href=&quot;http://twitter.com/^value($Twitter)^&quot;&gt;@^value($Twitter)&lt;/a&gt;^endIf^\par
\tab \tab \tab &lt;/p&gt;\par
\tab \tab \tab ^value(runCommand(&quot;perl /usr/local/bin/Markdown.pl&quot;,($Text)))^\par
\tab \tab \tab &lt;div class=&quot;toc&quot;&gt;\par
\tab \tab \tab \tab &lt;h2&gt;Table of Contents&lt;/h2&gt;\par
\tab \tab \tab \tab &lt;ul&gt;^justChildren(toc-section.html)^&lt;/ul&gt;\par
\tab \tab \tab &lt;/div&gt;\par
\tab \tab \tab ^justChildren^\par
\tab \tab &lt;/article&gt;\par
\tab \tab &lt;footer&gt;&lt;p&gt;\par
\tab \tab \tab Last updated at &lt;span class=&quot;modified&quot;&gt;^lastModified(this, &quot;*&quot;)^&lt;/span&gt;\par
\tab \tab \tab by &lt;a class=&quot;fn url&quot; href=&quot;^value($Address)^&quot;&gt;^value($FullName)^&lt;/a&gt;\par
\tab \tab \tab ^if($Email)^ / &lt;a class=&quot;email&quot; href=&quot;mailto:^value($Email)^&quot;&gt;^value($Email)^&lt;/a&gt;^endIf^\par
\tab \tab \tab ^if($Twitter)^ / &lt;a class=&quot;twitter&quot; href=&quot;http://twitter.com/^value($Twitter)^&quot;&gt;@^value($Twitter)&lt;/a&gt;^endIf^\par
\tab \tab &lt;/p&gt;&lt;/footer&gt;\par
\tab \tab &lt;script type=&quot;text/javascript&quot; src=&quot;js/article.js&quot;&gt;&lt;/script&gt;\par
\tab &lt;/body&gt;\par
&lt;/html&gt;\par
}}
</rtf>
</item>
<item ID="3358538523" Creator="lmorchard" >
<attribute name="Created" >2010-06-04T23:22:00-04:00</attribute>
<attribute name="HTMLExportTemplate" >/Internals/Templates/section.html</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-05T17:45:00-04:00</attribute>
<attribute name="Name" >section.html</attribute>
<attribute name="ReadCount" >62</attribute>
<attribute name="SelectionCount" >42</attribute>
<attribute name="WindowPlace" >Rect[ 707 462 1178 812]</attribute>
<attribute name="Xpos" >3.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >39</attribute>
<text >&lt;section id=&quot;section-^value($id)^&quot;&gt;	&lt;h^value($OutlineDepth)^&gt;&lt;a href=&quot;#section-^value($id)^&quot;&gt;^title^&lt;/a&gt;&lt;/h^value($OutlineDepth)^&gt;	^value(runCommand(&quot;perl /usr/local/bin/Markdown.pl&quot;,($Text)))^	^justChildren^&lt;/section&gt;</text>
<styles >
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fnil\fcharset77 Lucida Grande;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 &lt;section id=&quot;section-^value($id)^&quot;&gt;\par
\tab &lt;h^value($OutlineDepth)^&gt;&lt;a href=&quot;#section-^value($id)^&quot;&gt;^title^&lt;/a&gt;&lt;/h^value($OutlineDepth)^&gt;\par
\tab ^value(runCommand(&quot;perl /usr/local/bin/Markdown.pl&quot;,($Text)))^\par
\tab ^justChildren^\par
&lt;/section&gt;}}
</rtf>
</item>
<item ID="3358675141" Creator="lmorchard" >
<attribute name="Created" >2010-06-06T13:19:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T13:32:00-04:00</attribute>
<attribute name="Name" >toc-section.html</attribute>
<attribute name="ReadCount" >19</attribute>
<attribute name="SelectionCount" >8</attribute>
<attribute name="WindowPlace" >Rect[ 619 569 1319 869]</attribute>
<attribute name="Xpos" >7</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >51</attribute>
<text >&lt;li&gt;&lt;a href=&quot;#section-^value($id)^&quot;&gt;^title^&lt;/a&gt;	^if(ChildCount&gt;0)^		&lt;ul&gt;^justChildren(toc-section.html)^&lt;/ul&gt;	^endIf^&lt;/li&gt;</text>
<styles >
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fnil\fcharset77 Lucida Grande;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 &lt;li&gt;&lt;a href=&quot;#section-^value($id)^&quot;&gt;^title^&lt;/a&gt;\par
\tab ^if(ChildCount&gt;0)^\par
\tab \tab &lt;ul&gt;^justChildren(toc-section.html)^&lt;/ul&gt;\par
\tab ^endIf^\par
&lt;/li&gt;\par
}}
</rtf>
</item>
<item ID="3358717235" Creator="lmorchard" >
<attribute name="Created" >2010-06-06T14:35:00-04:00</attribute>
<attribute name="IsPrototype" >false</attribute>
<attribute name="Modified" >2010-06-06T14:35:00-04:00</attribute>
<attribute name="Name" >plain.txt</attribute>
<attribute name="ReadCount" >1</attribute>
<attribute name="SelectionCount" >6</attribute>
<attribute name="Xpos" >10.5</attribute>
<attribute name="Ypos" >0</attribute>
<attribute name="id" >57</attribute>
<text >^text^</text>
<styles >
 <tstyle font="Lucida Grande" bold="0" italic="0" underline="0" start="0" size="12" height="0" ascent="0" color="#000000"  />
</styles>
<rtf >{\rtf1\mac
{\fonttbl
{\f0\fnil\fcharset77 Lucida Grande;}}
{\colortbl
\red0\green0\blue0;}
{\info}
\deftab720
{\pard\plain\uc0\f0\fs24\cf0\ql\sb40\li360\ri360\tx720\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240 ^text^}}
</rtf>
</item>
</item>
</item>
</item>
<links >
<link name="prototype" sourceid="3358537383" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536123" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358537083" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536301" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536361" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536961" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536541" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536841" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536901" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536902" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358536842" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358537981" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358538101" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358538102" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358538105" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358538104" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358538103" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358538281" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358538522" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358538104" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358538523" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358539241" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358589521" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358592941" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358594381" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358602481" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358630951" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358537384" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358630952" destcreator="lmorchard"  />
<link name="prototype" sourceid="3358538104" sourcecreator="lmorchard" sstart="-1" slen="0" style="0" destid="3358675141" destcreator="lmorchard"  />
</links>
<macros >
</macros>
<preferences >
   <Creator > lmorchard</Creator>
   <ToolbarVisible > 0</ToolbarVisible>
   <OpenTextImmediately > 0</OpenTextImmediately>
   <RunScriptsAutomatically > 1</RunScriptsAutomatically>
   <Tinderbox5Wizard > 0</Tinderbox5Wizard>
   <DynamicSpelling > 0</DynamicSpelling>
   <AutoOpen > 1</AutoOpen>
   <RememberWindowPositions > 1</RememberWindowPositions>
   <KeepWindowsOpen > 1</KeepWindowsOpen>
   <LeftMargin > 2</LeftMargin>
   <RightMargin > -2</RightMargin>
   <ParagraphSpacing > 2</ParagraphSpacing>
   <MagnifyFonts > 1</MagnifyFonts>
   <TextFont > Monaco</TextFont>
   <TextSize > 3</TextSize>
   <TextJust > 0</TextJust>
   <AlwaysShowTextLinks > 0</AlwaysShowTextLinks>
   <TextLinkFrames > 1</TextLinkFrames>
   <TextLinkColor > 0 26112 52224</TextLinkColor>
   <VisitedLinkColor > 26112 0 52224</VisitedLinkColor>
   <ActiveLinkColor > 65535 0 0</ActiveLinkColor>
   <MagnifyPictures > 1</MagnifyPictures>
   <TextWindowWidth > 6</TextWindowWidth>
   <TextWindowHeight > 4</TextWindowHeight>
   <TextBackgroundColor > 65535 65535 65535</TextBackgroundColor>
   <TextColor > 0 0 0</TextColor>
   <ShowSidebar > 0</ShowSidebar>
   <AutoIndentLists > 1</AutoIndentLists>
   <ShowTitle > 1</ShowTitle>
   <TitleBackgroundColor > 0 0 0</TitleBackgroundColor>
   <TitleForegroundColor > 65535 65535 65535</TitleForegroundColor>
   <TitleFont > Lucida Grande</TitleFont>
   <TitleSize > 2</TitleSize>
   <TitleJust > 2</TitleJust>
   <MapShowLinks > 1</MapShowLinks>
   <MapEnacted > 1</MapEnacted>
   <InPlaceEditing > 1</InPlaceEditing>
   <MapLabelSize > 3</MapLabelSize>
   <MapBackgroundColor > 65535 65535 65535</MapBackgroundColor>
   <MapPrototypeColor > 56797 61166 56797</MapPrototypeColor>
   <MapFont > Lucida Grande</MapFont>
   <DarkenOutlineColors > 0</DarkenOutlineColors>
   <BlackOutlineText > 0</BlackOutlineText>
   <OutlineLeading > 2</OutlineLeading>
   <InteriorScale > 1</InteriorScale>
   <ExpandMode > 1</ExpandMode>
   <ExportImageFormat > 1</ExportImageFormat>
   <ExportURL > http://</ExportURL>
   <ExportHTMLCreator > 1</ExportHTMLCreator>
   <ExportHTMLHelper > Safari</ExportHTMLHelper>
   <ExportHTMLExtension > 0</ExportHTMLExtension>
   <HTMLParagraphStyle > 1</HTMLParagraphStyle>
   <HTMLViewFont > Lucida Grande</HTMLViewFont>
   <HTMLViewFontSize > 2</HTMLViewFontSize>
   <ExportTemplatePath > Portafilter:Users:lorchard:Applications:Tinderbox.app:Contents:MacOS:templates:html:plain</ExportTemplatePath>
   <ExportTemplate > Portafilter:Users:lorchard:Applications:Tinderbox.app:Contents:MacOS:templates:html:plain</ExportTemplate>
   <ExportTextTemplate > Portafilter:Users:lorchard:Applications:Tinderbox.app:Contents:MacOS:templates:text:title and text</ExportTextTemplate>
   <RoadmapWindowWidth > 0</RoadmapWindowWidth>
   <RoadmapWindowHeight > 0</RoadmapWindowHeight>
   <ExportTextCreator > 1</ExportTextCreator>
   <TextExportViewFont > Lucida Grande</TextExportViewFont>
   <TextExportViewFontSize > 2</TextExportViewFontSize>
   <ExportTextTemplatePath > Portafilter:Users:lorchard:Applications:Tinderbox.app:Contents:MacOS:templates:text:title and text</ExportTextTemplatePath>
   <ExportTextHelper > TextEdit</ExportTextHelper>
   <AskToDelete > 1</AskToDelete>
   <DailyTip > 1</DailyTip>
   <WarnEditingDefault > 0</WarnEditingDefault>
   <WarnDuplicateName > 0</WarnDuplicateName>
   <Version > version 5.5</Version>
   <PreferencePane > 3</PreferencePane>
   <Fontmap > 2
 4 Monaco
 1024 Lucida Grande
</Fontmap>
   <TipWindowX > 300</TipWindowX>
   <TipWindowY > 50</TipWindowY>
   <RegUserName > leslie orchard</RegUserName>
   <RegUserOrg > </RegUserOrg>
   <CurrentAttributeClass > TextFormat</CurrentAttributeClass>
   <CurrentAttribute > KeyAttributes</CurrentAttribute>
   <FindCaseSensitive > 1</FindCaseSensitive>
   <ExportFolder > Portafilter:Users:lorchard:Desktop:tinderbox-html5:</ExportFolder>
   <ReadOnly > 0</ReadOnly>
   <InfoWindowHeight > 792</InfoWindowHeight>
   <InfoWindowWidth > 591</InfoWindowWidth>
   <RecentFiles > &lt;files &gt;
&lt;file &gt;Portafilter:Users:lorchard:Desktop:byob-ui-blog:BYOB Bookmark UI.tbx&lt;/file&gt;
&lt;file &gt;Portafilter:Users:lorchard:Desktop:Flint:Flint.tbx&lt;/file&gt;
&lt;file &gt;Portafilter:Users:lorchard:Desktop:daybook.tbx&lt;/file&gt;
&lt;file &gt;Portafilter:Users:lorchard:devel:decafbad:recaffeinated:recaffeinated.tbx&lt;/file&gt;
&lt;file &gt;Portafilter:Users:lorchard:Desktop:wtf.tbx&lt;/file&gt;
&lt;file &gt;Portafilter:Users:lorchard:Documents:main.tbx&lt;/file&gt;
&lt;/files&gt;
</RecentFiles>
   <PingServer > http://rpc.weblogs.com/RPC2</PingServer>
   <PingMethod > weblogUpdates.ping</PingMethod>
   <PingTitle > your weblog name</PingTitle>
   <PingURL > weblog URL</PingURL>
      <PingTechnorati > 1</PingTechnorati>
   <PingWeblogsCom > 1</PingWeblogsCom>
   <PingGoogle > 1</PingGoogle>
   <PingFeedURL > </PingFeedURL>
   <WeblogServer > http://your_host/cgi-bin/mt/mt-xmlrpc.cgi</WeblogServer>
   <WeblogUser > </WeblogUser>
   <WeblogPassword > </WeblogPassword>
   <WeblogID > 1</WeblogID>
   <WeblogKind > 2</WeblogKind>
   <ToolbarKind > 3</ToolbarKind>
   <ReadingReminders > 0</ReadingReminders>
   <AllowViews > 1</AllowViews>
   <AutomaticAgentUpdate > 1</AutomaticAgentUpdate>
   <ToolbarX > 67</ToolbarX>
   <ToolbarY > 656</ToolbarY>
   <FindWindowX > 600</FindWindowX>
   <FindWindowY > 100</FindWindowY>
   <RenameWindowX > 569</RenameWindowX>
   <RenameWindowY > 95</RenameWindowY>
   <UpdateViewShown > 6/4/10 10:14 PM</UpdateViewShown>
   <ExportTextTemplatePath > Portafilter:Users:lorchard:Applications:Tinderbox.app:Contents:MacOS:templates:text:title and text</ExportTextTemplatePath>
   <LeftMargin > 2</LeftMargin>
   <RightMargin > -2</RightMargin>
   <ParagraphSpacing > 2</ParagraphSpacing>
   <MagnifyFonts > 1</MagnifyFonts>
   <SoundOn > 1</SoundOn>
   <BecomeReadOnly > 0</BecomeReadOnly>
   <CheckMail > 0</CheckMail>
   <MailHost > </MailHost>
   <MailUser > </MailUser>
   <MailPassword > </MailPassword>
   <CheckSimplenote > 0</CheckSimplenote>
   <SimplenoteEmail > </SimplenoteEmail>
   <SimplenotePassword > </SimplenotePassword>
</preferences>
<windows >
<window ID="3358536108" Creator="lmorchard" type="outline" bounds="Rect[ 82 94 522 550]" x="0" y="0" scale="5" expanded="3358536108 3358536123 3358537083 3358536901 3358536842 3358537261 3358537262 3358537263 " collapsed="3358536541 3358536841 3358538101 "  />
</windows>
</tinderbox>
